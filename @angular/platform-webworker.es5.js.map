{"version":3,"file":"platform-webworker.es5.js","sources":["../../../../packages/platform-webworker/src/platform-webworker.ts","../../../../packages/platform-webworker/src/worker_app.ts","../../../../packages/platform-webworker/src/web_workers/worker/worker_adapter.ts","../../../../packages/platform-webworker/src/web_workers/worker/renderer.ts","../../../../packages/platform-webworker/src/web_workers/worker/location_providers.ts","../../../../packages/platform-webworker/src/web_workers/worker/platform_location.ts","../../../../packages/platform-webworker/src/web_workers/ui/location_providers.ts","../../../../packages/platform-webworker/src/web_workers/ui/platform_location.ts","../../../../packages/platform-webworker/src/version.ts","../../../../packages/platform-webworker/src/worker_render.ts","../../../../packages/platform-webworker/src/web_workers/ui/renderer.ts","../../../../packages/platform-webworker/src/web_workers/ui/event_dispatcher.ts","../../../../packages/platform-webworker/src/web_workers/ui/event_serializer.ts","../../../../packages/platform-webworker/src/web_workers/shared/messaging_api.ts","../../../../packages/platform-webworker/src/web_workers/shared/service_message_broker.ts","../../../../packages/platform-webworker/src/web_workers/shared/post_message_bus.ts","../../../../packages/platform-webworker/src/web_workers/shared/client_message_broker.ts","../../../../packages/platform-webworker/src/web_workers/shared/serializer.ts","../../../../packages/platform-webworker/src/web_workers/shared/render_store.ts","../../../../packages/platform-webworker/src/web_workers/shared/message_bus.ts","../../../../packages/platform-webworker/src/web_workers/shared/api.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PlatformRef, Provider} from '@angular/core';\n\nimport {WORKER_SCRIPT, platformWorkerUi} from './worker_render';\n\nexport {VERSION} from './version';\nexport {ClientMessageBroker, ClientMessageBrokerFactory, FnArg, UiArguments} from './web_workers/shared/client_message_broker';\nexport {MessageBus, MessageBusSink, MessageBusSource} from './web_workers/shared/message_bus';\nexport {PRIMITIVE, SerializerTypes} from './web_workers/shared/serializer';\nexport {ReceivedMessage, ServiceMessageBroker, ServiceMessageBrokerFactory} from './web_workers/shared/service_message_broker';\nexport {WORKER_UI_LOCATION_PROVIDERS} from './web_workers/ui/location_providers';\nexport {WORKER_APP_LOCATION_PROVIDERS} from './web_workers/worker/location_providers';\nexport {WorkerAppModule, platformWorkerApp} from './worker_app';\nexport {platformWorkerUi} from './worker_render';\n/**\n * Bootstraps the worker ui.\n * \n * \\@experimental\n * @param {?} workerScriptUri\n * @param {?=} customProviders\n * @return {?}\n */\nexport function bootstrapWorkerUi(\n    workerScriptUri: string, customProviders: Provider[] = []): Promise<PlatformRef> {\n  // For now, just creates the worker ui platform...\n  const /** @type {?} */ platform = platformWorkerUi([\n    {provide: WORKER_SCRIPT, useValue: workerScriptUri},\n    ...customProviders,\n  ]);\n\n  return Promise.resolve(platform);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule, ɵPLATFORM_WORKER_APP_ID as PLATFORM_WORKER_APP_ID} from '@angular/common';\nimport {APP_INITIALIZER, ApplicationModule, ErrorHandler, NgModule, NgZone, PLATFORM_ID, PlatformRef, Provider, RendererFactory2, RootRenderer, createPlatformFactory, platformCore} from '@angular/core';\nimport {DOCUMENT, ɵBROWSER_SANITIZATION_PROVIDERS as BROWSER_SANITIZATION_PROVIDERS} from '@angular/platform-browser';\nimport {ON_WEB_WORKER} from './web_workers/shared/api';\nimport {ClientMessageBrokerFactory, ClientMessageBrokerFactory_} from './web_workers/shared/client_message_broker';\nimport {MessageBus} from './web_workers/shared/message_bus';\nimport {PostMessageBus, PostMessageBusSink, PostMessageBusSource} from './web_workers/shared/post_message_bus';\nimport {RenderStore} from './web_workers/shared/render_store';\nimport {Serializer} from './web_workers/shared/serializer';\nimport {ServiceMessageBrokerFactory, ServiceMessageBrokerFactory_} from './web_workers/shared/service_message_broker';\nimport {WebWorkerRendererFactory2} from './web_workers/worker/renderer';\nimport {WorkerDomAdapter} from './web_workers/worker/worker_adapter';\n/**\n * \\@experimental\n */\nexport const platformWorkerApp = createPlatformFactory(\n    platformCore, 'workerApp', [{provide: PLATFORM_ID, useValue: PLATFORM_WORKER_APP_ID}]);\n/**\n * @return {?}\n */\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\n\n// TODO(jteplitz602) remove this and compile with lib.webworker.d.ts (#3492)\nconst /** @type {?} */ _postMessage = {\n  postMessage: (message: any, transferrables?: [ArrayBuffer]) => {\n    ( /** @type {?} */((<any>postMessage)))(message, transferrables);\n  }\n};\n/**\n * @param {?} zone\n * @return {?}\n */\nexport function createMessageBus(zone: NgZone): MessageBus {\n  const /** @type {?} */ sink = new PostMessageBusSink(_postMessage);\n  const /** @type {?} */ source = new PostMessageBusSource();\n  const /** @type {?} */ bus = new PostMessageBus(sink, source);\n  bus.attachToZone(zone);\n  return bus;\n}\n/**\n * @return {?}\n */\nexport function setupWebWorker(): void {\n  WorkerDomAdapter.makeCurrent();\n}\n/**\n * The ng module for the worker app side.\n * \n * \\@experimental\n */\nexport class WorkerAppModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    BROWSER_SANITIZATION_PROVIDERS,\n    Serializer,\n    {provide: DOCUMENT, useValue: null},\n    {provide: ClientMessageBrokerFactory, useClass: ClientMessageBrokerFactory_},\n    {provide: ServiceMessageBrokerFactory, useClass: ServiceMessageBrokerFactory_},\n    WebWorkerRendererFactory2,\n    {provide: RendererFactory2, useExisting: WebWorkerRendererFactory2},\n    {provide: ON_WEB_WORKER, useValue: true},\n    RenderStore,\n    {provide: ErrorHandler, useFactory: errorHandler, deps: []},\n    {provide: MessageBus, useFactory: createMessageBus, deps: [NgZone]},\n    {provide: APP_INITIALIZER, useValue: setupWebWorker, multi: true},\n  ],\n  exports: [\n    CommonModule,\n    ApplicationModule,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction WorkerAppModule_tsickle_Closure_declarations() {\n/** @type {?} */\nWorkerAppModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWorkerAppModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ɵDomAdapter as DomAdapter, ɵsetRootDomAdapter as setRootDomAdapter} from '@angular/platform-browser';\n/**\n * This adapter is required to log error messages.\n * \n * Note: other methods all throw as the DOM is not accessible directly in web worker context.\n */\nexport class WorkerDomAdapter extends DomAdapter {\n/**\n * @return {?}\n */\nstatic makeCurrent() { setRootDomAdapter(new WorkerDomAdapter()); }\n/**\n * @param {?} error\n * @return {?}\n */\nlogError(error: any) {\n    if (console.error) {\n      console.error(error);\n    } else {\n      // tslint:disable-next-line:no-console\n      console.log(error);\n    }\n  }\n/**\n * @param {?} error\n * @return {?}\n */\nlog(error: any) { console.log(error); }\n/**\n * @param {?} error\n * @return {?}\n */\nlogGroup(error: any) {\n    if (console.group) {\n      console.group(error);\n      this.logError(error);\n    } else {\n      // tslint:disable-next-line:no-console\n      console.log(error);\n    }\n  }\n/**\n * @return {?}\n */\nlogGroupEnd() {\n    if (console.groupEnd) {\n      console.groupEnd();\n    }\n  }\n/**\n * @param {?} nodeA\n * @param {?} nodeB\n * @return {?}\n */\ncontains(nodeA: any, nodeB: any): boolean { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\nhasProperty(element: any, name: string): boolean { throw 'not implemented'; }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: Element, name: string, value: any) { throw 'not implemented'; }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\ngetProperty(el: Element, name: string): any { throw 'not implemented'; }\n/**\n * @param {?} el\n * @param {?} methodName\n * @param {?} args\n * @return {?}\n */\ninvoke(el: Element, methodName: string, args: any[]): any { throw 'not implemented'; }\n/**\n * @return {?}\n */\nget attrToPropMap(): {[key: string]: string} { throw 'not implemented'; }\n/**\n * @param {?} value\n * @return {?}\n */\nset attrToPropMap(value: {[key: string]: string}) { throw 'not implemented'; }\n/**\n * @param {?} templateHtml\n * @return {?}\n */\nparse(templateHtml: string) { throw 'not implemented'; }\n/**\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nquerySelector(el: any, selector: string): HTMLElement { throw 'not implemented'; }\n/**\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nquerySelectorAll(el: any, selector: string): any[] { throw 'not implemented'; }\n/**\n * @param {?} el\n * @param {?} evt\n * @param {?} listener\n * @return {?}\n */\non(el: any, evt: any, listener: any) { throw 'not implemented'; }\n/**\n * @param {?} el\n * @param {?} evt\n * @param {?} listener\n * @return {?}\n */\nonAndCancel(el: any, evt: any, listener: any): Function { throw 'not implemented'; }\n/**\n * @param {?} el\n * @param {?} evt\n * @return {?}\n */\ndispatchEvent(el: any, evt: any) { throw 'not implemented'; }\n/**\n * @param {?} eventType\n * @return {?}\n */\ncreateMouseEvent(eventType: any): any { throw 'not implemented'; }\n/**\n * @param {?} eventType\n * @return {?}\n */\ncreateEvent(eventType: string): any { throw 'not implemented'; }\n/**\n * @param {?} evt\n * @return {?}\n */\npreventDefault(evt: any) { throw 'not implemented'; }\n/**\n * @param {?} evt\n * @return {?}\n */\nisPrevented(evt: any): boolean { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetInnerHTML(el: any): string { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetTemplateContent(el: any): any { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetOuterHTML(el: any): string { throw 'not implemented'; }\n/**\n * @param {?} node\n * @return {?}\n */\nnodeName(node: any): string { throw 'not implemented'; }\n/**\n * @param {?} node\n * @return {?}\n */\nnodeValue(node: any): string { throw 'not implemented'; }\n/**\n * @param {?} node\n * @return {?}\n */\ntype(node: any): string { throw 'not implemented'; }\n/**\n * @param {?} node\n * @return {?}\n */\ncontent(node: any): any { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\nfirstChild(el: any): Node { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\nnextSibling(el: any): Node { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\nparentElement(el: any): Node { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\nchildNodes(el: any): Node[] { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\nchildNodesAsList(el: any): Node[] { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\nclearNodes(el: any) { throw 'not implemented'; }\n/**\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\nappendChild(el: any, node: any) { throw 'not implemented'; }\n/**\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\nremoveChild(el: any, node: any) { throw 'not implemented'; }\n/**\n * @param {?} el\n * @param {?} newNode\n * @param {?} oldNode\n * @return {?}\n */\nreplaceChild(el: any, newNode: any, oldNode: any) { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\nremove(el: any): Node { throw 'not implemented'; }\n/**\n * @param {?} parent\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\ninsertBefore(parent: any, el: any, node: any) { throw 'not implemented'; }\n/**\n * @param {?} parent\n * @param {?} el\n * @param {?} nodes\n * @return {?}\n */\ninsertAllBefore(parent: any, el: any, nodes: any) { throw 'not implemented'; }\n/**\n * @param {?} parent\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\ninsertAfter(parent: any, el: any, node: any) { throw 'not implemented'; }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetInnerHTML(el: any, value: any) { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetText(el: any): string { throw 'not implemented'; }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetText(el: any, value: string) { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetValue(el: any): string { throw 'not implemented'; }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetValue(el: any, value: string) { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetChecked(el: any): boolean { throw 'not implemented'; }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetChecked(el: any, value: boolean) { throw 'not implemented'; }\n/**\n * @param {?} text\n * @return {?}\n */\ncreateComment(text: string): any { throw 'not implemented'; }\n/**\n * @param {?} html\n * @return {?}\n */\ncreateTemplate(html: any): HTMLElement { throw 'not implemented'; }\n/**\n * @param {?} tagName\n * @param {?=} doc\n * @return {?}\n */\ncreateElement(tagName: any, doc?: any): HTMLElement { throw 'not implemented'; }\n/**\n * @param {?} ns\n * @param {?} tagName\n * @param {?=} doc\n * @return {?}\n */\ncreateElementNS(ns: string, tagName: string, doc?: any): Element { throw 'not implemented'; }\n/**\n * @param {?} text\n * @param {?=} doc\n * @return {?}\n */\ncreateTextNode(text: string, doc?: any): Text { throw 'not implemented'; }\n/**\n * @param {?} attrName\n * @param {?} attrValue\n * @param {?=} doc\n * @return {?}\n */\ncreateScriptTag(attrName: string, attrValue: string, doc?: any): HTMLElement {\n    throw 'not implemented';\n  }\n/**\n * @param {?} css\n * @param {?=} doc\n * @return {?}\n */\ncreateStyleElement(css: string, doc?: any): HTMLStyleElement { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\ncreateShadowRoot(el: any): any { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetShadowRoot(el: any): any { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetHost(el: any): any { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetDistributedNodes(el: any): Node[] { throw 'not implemented'; }\n/**\n * @param {?} node\n * @return {?}\n */\nclone(node: Node): Node { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetElementsByClassName(element: any, name: string): HTMLElement[] { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetElementsByTagName(element: any, name: string): HTMLElement[] { throw 'not implemented'; }\n/**\n * @param {?} element\n * @return {?}\n */\nclassList(element: any): any[] { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\naddClass(element: any, className: string) { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nremoveClass(element: any, className: string) { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nhasClass(element: any, className: string): boolean { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} styleName\n * @param {?} styleValue\n * @return {?}\n */\nsetStyle(element: any, styleName: string, styleValue: string) { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} styleName\n * @return {?}\n */\nremoveStyle(element: any, styleName: string) { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} styleName\n * @return {?}\n */\ngetStyle(element: any, styleName: string): string { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} styleName\n * @param {?=} styleValue\n * @return {?}\n */\nhasStyle(element: any, styleName: string, styleValue?: string): boolean {\n    throw 'not implemented';\n  }\n/**\n * @param {?} element\n * @return {?}\n */\ntagName(element: any): string { throw 'not implemented'; }\n/**\n * @param {?} element\n * @return {?}\n */\nattributeMap(element: any): Map<string, string> { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\nhasAttribute(element: any, attribute: string): boolean { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} attribute\n * @return {?}\n */\nhasAttributeNS(element: any, ns: string, attribute: string): boolean { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\ngetAttribute(element: any, attribute: string): string { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} attribute\n * @return {?}\n */\ngetAttributeNS(element: any, ns: string, attribute: string): string { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetAttribute(element: any, name: string, value: string) { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetAttributeNS(element: any, ns: string, name: string, value: string) { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\nremoveAttribute(element: any, attribute: string) { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} attribute\n * @return {?}\n */\nremoveAttributeNS(element: any, ns: string, attribute: string) { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\ntemplateAwareRoot(el: any) { throw 'not implemented'; }\n/**\n * @return {?}\n */\ncreateHtmlDocument(): HTMLDocument { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetBoundingClientRect(el: any) { throw 'not implemented'; }\n/**\n * @param {?} doc\n * @return {?}\n */\ngetTitle(doc: Document): string { throw 'not implemented'; }\n/**\n * @param {?} doc\n * @param {?} newTitle\n * @return {?}\n */\nsetTitle(doc: Document, newTitle: string) { throw 'not implemented'; }\n/**\n * @param {?} n\n * @param {?} selector\n * @return {?}\n */\nelementMatches(n: any, selector: string): boolean { throw 'not implemented'; }\n/**\n * @param {?} el\n * @return {?}\n */\nisTemplateElement(el: any): boolean { throw 'not implemented'; }\n/**\n * @param {?} node\n * @return {?}\n */\nisTextNode(node: any): boolean { throw 'not implemented'; }\n/**\n * @param {?} node\n * @return {?}\n */\nisCommentNode(node: any): boolean { throw 'not implemented'; }\n/**\n * @param {?} node\n * @return {?}\n */\nisElementNode(node: any): boolean { throw 'not implemented'; }\n/**\n * @param {?} node\n * @return {?}\n */\nhasShadowRoot(node: any): boolean { throw 'not implemented'; }\n/**\n * @param {?} node\n * @return {?}\n */\nisShadowRoot(node: any): boolean { throw 'not implemented'; }\n/**\n * @param {?} node\n * @return {?}\n */\nimportIntoDoc(node: Node): Node { throw 'not implemented'; }\n/**\n * @param {?} node\n * @return {?}\n */\nadoptNode(node: Node): Node { throw 'not implemented'; }\n/**\n * @param {?} element\n * @return {?}\n */\ngetHref(element: any): string { throw 'not implemented'; }\n/**\n * @param {?} event\n * @return {?}\n */\ngetEventKey(event: any): string { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} baseUrl\n * @param {?} href\n * @return {?}\n */\nresolveAndSetHref(element: any, baseUrl: string, href: string) { throw 'not implemented'; }\n/**\n * @return {?}\n */\nsupportsDOMEvents(): boolean { throw 'not implemented'; }\n/**\n * @return {?}\n */\nsupportsNativeShadowDOM(): boolean { throw 'not implemented'; }\n/**\n * @param {?} doc\n * @param {?} target\n * @return {?}\n */\ngetGlobalEventTarget(doc: Document, target: string): any { throw 'not implemented'; }\n/**\n * @return {?}\n */\ngetHistory(): History { throw 'not implemented'; }\n/**\n * @return {?}\n */\ngetLocation(): Location { throw 'not implemented'; }\n/**\n * @param {?} doc\n * @return {?}\n */\ngetBaseHref(doc: Document): string { throw 'not implemented'; }\n/**\n * @return {?}\n */\nresetBaseElement(): void { throw 'not implemented'; }\n/**\n * @return {?}\n */\ngetUserAgent(): string { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetData(element: any, name: string, value: string) { throw 'not implemented'; }\n/**\n * @param {?} element\n * @return {?}\n */\ngetComputedStyle(element: any): any { throw 'not implemented'; }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetData(element: any, name: string): string { throw 'not implemented'; }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetGlobalVar(name: string, value: any) { throw 'not implemented'; }\n/**\n * @return {?}\n */\nperformanceNow(): number { throw 'not implemented'; }\n/**\n * @return {?}\n */\ngetAnimationPrefix(): string { throw 'not implemented'; }\n/**\n * @return {?}\n */\ngetTransitionEnd(): string { throw 'not implemented'; }\n/**\n * @return {?}\n */\nsupportsAnimation(): boolean { throw 'not implemented'; }\n/**\n * @return {?}\n */\nsupportsWebAnimation(): boolean { throw 'not implemented'; }\n/**\n * @return {?}\n */\nsupportsCookies(): boolean { return false; }\n/**\n * @param {?} name\n * @return {?}\n */\ngetCookie(name: string): string { throw 'not implemented'; }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetCookie(name: string, value: string) { throw 'not implemented'; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, RenderComponentType, Renderer, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, RootRenderer, ViewEncapsulation} from '@angular/core';\n\nimport {ClientMessageBroker, ClientMessageBrokerFactory, FnArg, UiArguments} from '../shared/client_message_broker';\nimport {MessageBus} from '../shared/message_bus';\nimport {EVENT_2_CHANNEL, RENDERER_2_CHANNEL} from '../shared/messaging_api';\nimport {RenderStore} from '../shared/render_store';\nimport {Serializer, SerializerTypes} from '../shared/serializer';\nexport class NamedEventEmitter {\nprivate _listeners: Map<string, Function[]>;\n/**\n * @param {?} eventName\n * @param {?} callback\n * @return {?}\n */\nlisten(eventName: string, callback: Function) { this._getListeners(eventName).push(callback); }\n/**\n * @param {?} eventName\n * @param {?} listener\n * @return {?}\n */\nunlisten(eventName: string, listener: Function) {\n    const /** @type {?} */ listeners = this._getListeners(eventName);\n    const /** @type {?} */ index = listeners.indexOf(listener);\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n  }\n/**\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\ndispatchEvent(eventName: string, event: any) {\n    const /** @type {?} */ listeners = this._getListeners(eventName);\n    for (let /** @type {?} */ i = 0; i < listeners.length; i++) {\n      listeners[i](event);\n    }\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nprivate _getListeners(eventName: string): Function[] {\n    if (!this._listeners) {\n      this._listeners = new Map<string, Function[]>();\n    }\n    let /** @type {?} */ listeners = this._listeners.get(eventName);\n    if (!listeners) {\n      listeners = [];\n      this._listeners.set(eventName, listeners);\n    }\n    return listeners;\n  }\n}\n\nfunction NamedEventEmitter_tsickle_Closure_declarations() {\n/** @type {?} */\nNamedEventEmitter.prototype._listeners;\n}\n\n/**\n * @param {?} target\n * @param {?} eventName\n * @return {?}\n */\nfunction eventNameWithTarget(target: string, eventName: string): string {\n  return `${target}:${eventName}`;\n}\nexport class WebWorkerRendererFactory2 implements RendererFactory2 {\n  globalEvents = new NamedEventEmitter();\nprivate _messageBroker: ClientMessageBroker;\n/**\n * @param {?} messageBrokerFactory\n * @param {?} bus\n * @param {?} _serializer\n * @param {?} renderStore\n */\nconstructor(\n      messageBrokerFactory: ClientMessageBrokerFactory, bus: MessageBus,\nprivate _serializer: Serializer,\npublic renderStore: RenderStore) {\n    this._messageBroker = messageBrokerFactory.createMessageBroker(RENDERER_2_CHANNEL);\n    bus.initChannel(EVENT_2_CHANNEL);\n    const source = bus.from(EVENT_2_CHANNEL);\n    source.subscribe({next: (message: any) => this._dispatchEvent(message)});\n  }\n/**\n * @param {?} element\n * @param {?} type\n * @return {?}\n */\ncreateRenderer(element: any, type: RendererType2): Renderer2 {\n    const /** @type {?} */ renderer = new WebWorkerRenderer2(this);\n\n    const /** @type {?} */ id = this.renderStore.allocateId();\n    this.renderStore.store(renderer, id);\n    this.callUI('createRenderer', [\n      new FnArg(element, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(type, SerializerTypes.RENDERER_TYPE_2),\n      new FnArg(renderer, SerializerTypes.RENDER_STORE_OBJECT),\n    ]);\n\n    return renderer;\n  }\n/**\n * @param {?} fnName\n * @param {?} fnArgs\n * @return {?}\n */\ncallUI(fnName: string, fnArgs: FnArg[]) {\n    const /** @type {?} */ args = new UiArguments(fnName, fnArgs);\n    this._messageBroker.runOnService(args, null);\n  }\n/**\n * @return {?}\n */\nallocateNode(): WebWorkerRenderNode {\n    const /** @type {?} */ result = new WebWorkerRenderNode();\n    const /** @type {?} */ id = this.renderStore.allocateId();\n    this.renderStore.store(result, id);\n    return result;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nfreeNode(node: any) { this.renderStore.remove(node); }\n/**\n * @return {?}\n */\nallocateId(): number { return this.renderStore.allocateId(); }\n/**\n * @param {?} message\n * @return {?}\n */\nprivate _dispatchEvent(message: {[key: string]: any}): void {\n    const /** @type {?} */ element: WebWorkerRenderNode =\n        this._serializer.deserialize(message['element'], SerializerTypes.RENDER_STORE_OBJECT);\n\n    const /** @type {?} */ eventName = message['eventName'];\n    const /** @type {?} */ target = message['eventTarget'];\n    const /** @type {?} */ event = message['event'];\n\n    if (target) {\n      this.globalEvents.dispatchEvent(eventNameWithTarget(target, eventName), event);\n    } else {\n      element.events.dispatchEvent(eventName, event);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ClientMessageBrokerFactory, },\n{type: MessageBus, },\n{type: Serializer, },\n{type: RenderStore, },\n];\n}\n\nfunction WebWorkerRendererFactory2_tsickle_Closure_declarations() {\n/** @type {?} */\nWebWorkerRendererFactory2.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWebWorkerRendererFactory2.ctorParameters;\n/** @type {?} */\nWebWorkerRendererFactory2.prototype.globalEvents;\n/** @type {?} */\nWebWorkerRendererFactory2.prototype._messageBroker;\n/** @type {?} */\nWebWorkerRendererFactory2.prototype._serializer;\n/** @type {?} */\nWebWorkerRendererFactory2.prototype.renderStore;\n}\n\nexport class WebWorkerRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n/**\n * @param {?} _rendererFactory\n */\nconstructor(private _rendererFactory: WebWorkerRendererFactory2) {}\nprivate asFnArg = new FnArg(this, SerializerTypes.RENDER_STORE_OBJECT);\n/**\n * @return {?}\n */\ndestroy(): void { this.callUIWithRenderer('destroy'); }\n/**\n * @param {?} node\n * @return {?}\n */\ndestroyNode(node: any) {\n    this.callUIWithRenderer('destroyNode', [new FnArg(node, SerializerTypes.RENDER_STORE_OBJECT)]);\n    this._rendererFactory.freeNode(node);\n  }\n/**\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\ncreateElement(name: string, namespace?: string): any {\n    const /** @type {?} */ node = this._rendererFactory.allocateNode();\n    this.callUIWithRenderer('createElement', [\n      new FnArg(name),\n      new FnArg(namespace),\n      new FnArg(node, SerializerTypes.RENDER_STORE_OBJECT),\n    ]);\n    return node;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\ncreateComment(value: string): any {\n    const /** @type {?} */ node = this._rendererFactory.allocateNode();\n    this.callUIWithRenderer('createComment', [\n      new FnArg(value),\n      new FnArg(node, SerializerTypes.RENDER_STORE_OBJECT),\n    ]);\n    return node;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\ncreateText(value: string): any {\n    const /** @type {?} */ node = this._rendererFactory.allocateNode();\n    this.callUIWithRenderer('createText', [\n      new FnArg(value),\n      new FnArg(node, SerializerTypes.RENDER_STORE_OBJECT),\n    ]);\n    return node;\n  }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @return {?}\n */\nappendChild(parent: any, newChild: any): void {\n    this.callUIWithRenderer('appendChild', [\n      new FnArg(parent, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(newChild, SerializerTypes.RENDER_STORE_OBJECT),\n    ]);\n  }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @param {?} refChild\n * @return {?}\n */\ninsertBefore(parent: any, newChild: any, refChild: any): void {\n    if (!parent) {\n      return;\n    }\n\n    this.callUIWithRenderer('insertBefore', [\n      new FnArg(parent, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(newChild, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(refChild, SerializerTypes.RENDER_STORE_OBJECT),\n    ]);\n  }\n/**\n * @param {?} parent\n * @param {?} oldChild\n * @return {?}\n */\nremoveChild(parent: any, oldChild: any): void {\n    this.callUIWithRenderer('removeChild', [\n      new FnArg(parent, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(oldChild, SerializerTypes.RENDER_STORE_OBJECT),\n    ]);\n  }\n/**\n * @param {?} selectorOrNode\n * @return {?}\n */\nselectRootElement(selectorOrNode: string|any): any {\n    const /** @type {?} */ node = this._rendererFactory.allocateNode();\n    this.callUIWithRenderer('selectRootElement', [\n      new FnArg(selectorOrNode),\n      new FnArg(node, SerializerTypes.RENDER_STORE_OBJECT),\n    ]);\n    return node;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nparentNode(node: any): any {\n    const /** @type {?} */ res = this._rendererFactory.allocateNode();\n    this.callUIWithRenderer('parentNode', [\n      new FnArg(node, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(res, SerializerTypes.RENDER_STORE_OBJECT),\n    ]);\n    return res;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nnextSibling(node: any): any {\n    const /** @type {?} */ res = this._rendererFactory.allocateNode();\n    this.callUIWithRenderer('nextSibling', [\n      new FnArg(node, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(res, SerializerTypes.RENDER_STORE_OBJECT),\n    ]);\n    return res;\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @param {?=} namespace\n * @return {?}\n */\nsetAttribute(el: any, name: string, value: string, namespace?: string): void {\n    this.callUIWithRenderer('setAttribute', [\n      new FnArg(el, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(name),\n      new FnArg(value),\n      new FnArg(namespace),\n    ]);\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\nremoveAttribute(el: any, name: string, namespace?: string): void {\n    this.callUIWithRenderer('removeAttribute', [\n      new FnArg(el, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(name),\n      new FnArg(namespace),\n    ]);\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\naddClass(el: any, name: string): void {\n    this.callUIWithRenderer('addClass', [\n      new FnArg(el, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(name),\n    ]);\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\nremoveClass(el: any, name: string): void {\n    this.callUIWithRenderer('removeClass', [\n      new FnArg(el, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(name),\n    ]);\n  }\n/**\n * @param {?} el\n * @param {?} style\n * @param {?} value\n * @param {?} flags\n * @return {?}\n */\nsetStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    this.callUIWithRenderer('setStyle', [\n      new FnArg(el, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(style),\n      new FnArg(value),\n      new FnArg(flags),\n    ]);\n  }\n/**\n * @param {?} el\n * @param {?} style\n * @param {?} flags\n * @return {?}\n */\nremoveStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    this.callUIWithRenderer('removeStyle', [\n      new FnArg(el, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(style),\n      new FnArg(flags),\n    ]);\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: any, name: string, value: any): void {\n    this.callUIWithRenderer('setProperty', [\n      new FnArg(el, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(name),\n      new FnArg(value),\n    ]);\n  }\n/**\n * @param {?} node\n * @param {?} value\n * @return {?}\n */\nsetValue(node: any, value: string): void {\n    this.callUIWithRenderer('setValue', [\n      new FnArg(node, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(value),\n    ]);\n  }\n/**\n * @param {?} target\n * @param {?} eventName\n * @param {?} listener\n * @return {?}\n */\nlisten(\n      target: 'window'|'document'|'body'|any, eventName: string,\n      listener: (event: any) => boolean): () => void {\n    const /** @type {?} */ unlistenId = this._rendererFactory.allocateId();\n\n    const [targetEl, targetName, fullName]: [any, string, string] = typeof target === 'string' ?\n        [null, target, `${target}:${eventName}`] :\n        [target, null, null];\n\n    if (fullName) {\n      this._rendererFactory.globalEvents.listen(fullName, listener);\n    } else {\n      targetEl.events.listen(eventName, listener);\n    }\n\n    this.callUIWithRenderer('listen', [\n      new FnArg(targetEl, SerializerTypes.RENDER_STORE_OBJECT),\n      new FnArg(targetName),\n      new FnArg(eventName),\n      new FnArg(unlistenId),\n    ]);\n\n    return () => {\n      if (fullName) {\n        this._rendererFactory.globalEvents.unlisten(fullName, listener);\n      } else {\n        targetEl.events.unlisten(eventName, listener);\n      }\n      this.callUIWithRenderer('unlisten', [new FnArg(unlistenId)]);\n    };\n  }\n/**\n * @param {?} fnName\n * @param {?=} fnArgs\n * @return {?}\n */\nprivate callUIWithRenderer(fnName: string, fnArgs: FnArg[] = []) {\n    // always pass the renderer as the first arg\n    this._rendererFactory.callUI(fnName, [this.asFnArg, ...fnArgs]);\n  }\n}\n\nfunction WebWorkerRenderer2_tsickle_Closure_declarations() {\n/** @type {?} */\nWebWorkerRenderer2.prototype.data;\n/** @type {?} */\nWebWorkerRenderer2.prototype.asFnArg;\n/** @type {?} */\nWebWorkerRenderer2.prototype._rendererFactory;\n}\n\nexport class WebWorkerRenderNode { events = new NamedEventEmitter(); }\n\nfunction WebWorkerRenderNode_tsickle_Closure_declarations() {\n/** @type {?} */\nWebWorkerRenderNode.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {LOCATION_INITIALIZED, PlatformLocation} from '@angular/common';\nimport {APP_INITIALIZER, InjectionToken, NgZone} from '@angular/core';\n\nimport {WebWorkerPlatformLocation} from './platform_location';\n/**\n * Those providers should be added when the router is used in a worker context in addition to the\n * {\\@link ROUTER_PROVIDERS} and after them.\n * \\@experimental\n */\nexport const WORKER_APP_LOCATION_PROVIDERS = [\n  {provide: PlatformLocation, useClass: WebWorkerPlatformLocation}, {\n    provide: APP_INITIALIZER,\n    useFactory: appInitFnFactory,\n    multi: true,\n    deps: [PlatformLocation, NgZone]\n  },\n  {provide: LOCATION_INITIALIZED, useFactory: locationInitialized, deps: [PlatformLocation]}\n];\n/**\n * @param {?} platformLocation\n * @return {?}\n */\nexport function locationInitialized(platformLocation: WebWorkerPlatformLocation) {\n  return platformLocation.initialized;\n}\n/**\n * @param {?} platformLocation\n * @param {?} zone\n * @return {?}\n */\nexport function appInitFnFactory(platformLocation: WebWorkerPlatformLocation, zone: NgZone): () =>\n    Promise<boolean> {\n  return () => zone.runGuarded(() => platformLocation.init());\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {LocationChangeListener, PlatformLocation} from '@angular/common';\nimport {EventEmitter, Injectable} from '@angular/core';\nimport {ClientMessageBroker, ClientMessageBrokerFactory, FnArg, UiArguments} from '../shared/client_message_broker';\nimport {MessageBus} from '../shared/message_bus';\nimport {ROUTER_CHANNEL} from '../shared/messaging_api';\nimport {LocationType, Serializer, SerializerTypes} from '../shared/serializer';\nexport class WebWorkerPlatformLocation extends PlatformLocation {\nprivate _broker: ClientMessageBroker;\nprivate _popStateListeners: Array<Function> = [];\nprivate _hashChangeListeners: Array<Function> = [];\nprivate _location: LocationType = null;\nprivate _channelSource: EventEmitter<Object>;\npublic initialized: Promise<any>;\nprivate initializedResolve: () => void;\n/**\n * @param {?} brokerFactory\n * @param {?} bus\n * @param {?} _serializer\n */\nconstructor(\n      brokerFactory: ClientMessageBrokerFactory, bus: MessageBus,\nprivate _serializer: Serializer) {\n    super();\n    this._broker = brokerFactory.createMessageBroker(ROUTER_CHANNEL);\n    this._channelSource = bus.from(ROUTER_CHANNEL);\n\n    this._channelSource.subscribe({\n      next: (msg: {[key: string]: any}) => {\n        let listeners: Array<Function> = null;\n        if (msg.hasOwnProperty('event')) {\n          const type: string = msg['event']['type'];\n          if (type === 'popstate') {\n            listeners = this._popStateListeners;\n          } else if (type === 'hashchange') {\n            listeners = this._hashChangeListeners;\n          }\n\n          if (listeners) {\n            // There was a popState or hashChange event, so the location object thas been updated\n            this._location = this._serializer.deserialize(msg['location'], LocationType);\n            listeners.forEach((fn: Function) => fn(msg['event']));\n          }\n        }\n      }\n    });\n    this.initialized = new Promise(res => this.initializedResolve = res);\n  }\n/**\n * \\@internal *\n * @return {?}\n */\ninit(): Promise<boolean> {\n    const /** @type {?} */ args: UiArguments = new UiArguments('getLocation');\n\n    return this._broker.runOnService(args, LocationType)\n        .then(\n            (val: LocationType) => {\n              this._location = val;\n              this.initializedResolve();\n              return true;\n            },\n            err => { throw new Error(err); });\n  }\n/**\n * @return {?}\n */\ngetBaseHrefFromDOM(): string {\n    throw new Error(\n        'Attempt to get base href from DOM from WebWorker. You must either provide a value for the APP_BASE_HREF token through DI or use the hash location strategy.');\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener): void { this._popStateListeners.push(fn); }\n/**\n * @param {?} fn\n * @return {?}\n */\nonHashChange(fn: LocationChangeListener): void { this._hashChangeListeners.push(fn); }\n/**\n * @return {?}\n */\nget pathname(): string { return this._location ? this._location.pathname : null; }\n/**\n * @return {?}\n */\nget search(): string { return this._location ? this._location.search : null; }\n/**\n * @return {?}\n */\nget hash(): string { return this._location ? this._location.hash : null; }\n/**\n * @param {?} newPath\n * @return {?}\n */\nset pathname(newPath: string) {\n    if (this._location === null) {\n      throw new Error('Attempt to set pathname before value is obtained from UI');\n    }\n\n    this._location.pathname = newPath;\n\n    const /** @type {?} */ fnArgs = [new FnArg(newPath, SerializerTypes.PRIMITIVE)];\n    const /** @type {?} */ args = new UiArguments('setPathname', fnArgs);\n    this._broker.runOnService(args, null);\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\npushState(state: any, title: string, url: string): void {\n    const /** @type {?} */ fnArgs = [\n      new FnArg(state, SerializerTypes.PRIMITIVE),\n      new FnArg(title, SerializerTypes.PRIMITIVE),\n      new FnArg(url, SerializerTypes.PRIMITIVE),\n    ];\n    const /** @type {?} */ args = new UiArguments('pushState', fnArgs);\n    this._broker.runOnService(args, null);\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string): void {\n    const /** @type {?} */ fnArgs = [\n      new FnArg(state, SerializerTypes.PRIMITIVE),\n      new FnArg(title, SerializerTypes.PRIMITIVE),\n      new FnArg(url, SerializerTypes.PRIMITIVE),\n    ];\n    const /** @type {?} */ args = new UiArguments('replaceState', fnArgs);\n    this._broker.runOnService(args, null);\n  }\n/**\n * @return {?}\n */\nforward(): void {\n    const /** @type {?} */ args = new UiArguments('forward');\n    this._broker.runOnService(args, null);\n  }\n/**\n * @return {?}\n */\nback(): void {\n    const /** @type {?} */ args = new UiArguments('back');\n    this._broker.runOnService(args, null);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ClientMessageBrokerFactory, },\n{type: MessageBus, },\n{type: Serializer, },\n];\n}\n\nfunction WebWorkerPlatformLocation_tsickle_Closure_declarations() {\n/** @type {?} */\nWebWorkerPlatformLocation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWebWorkerPlatformLocation.ctorParameters;\n/** @type {?} */\nWebWorkerPlatformLocation.prototype._broker;\n/** @type {?} */\nWebWorkerPlatformLocation.prototype._popStateListeners;\n/** @type {?} */\nWebWorkerPlatformLocation.prototype._hashChangeListeners;\n/** @type {?} */\nWebWorkerPlatformLocation.prototype._location;\n/** @type {?} */\nWebWorkerPlatformLocation.prototype._channelSource;\n/** @type {?} */\nWebWorkerPlatformLocation.prototype.initialized;\n/** @type {?} */\nWebWorkerPlatformLocation.prototype.initializedResolve;\n/** @type {?} */\nWebWorkerPlatformLocation.prototype._serializer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector, NgZone, PLATFORM_INITIALIZER, Provider} from '@angular/core';\n\nimport {ɵBrowserPlatformLocation as BrowserPlatformLocation} from '@angular/platform-browser';\nimport {MessageBasedPlatformLocation} from './platform_location';\n/**\n * A list of {\\@link Provider}s. To use the router in a Worker enabled application you must\n * include these providers when setting up the render thread.\n * \\@experimental\n */\nexport const WORKER_UI_LOCATION_PROVIDERS: Provider[] = [\n  MessageBasedPlatformLocation, BrowserPlatformLocation,\n  {provide: PLATFORM_INITIALIZER, useFactory: initUiLocation, multi: true, deps: [Injector]}\n];\n/**\n * @param {?} injector\n * @return {?}\n */\nfunction initUiLocation(injector: Injector): () => void {\n  return () => {\n    const /** @type {?} */ zone = injector.get(NgZone);\n\n    zone.runGuarded(() => injector.get(MessageBasedPlatformLocation).start());\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {LocationChangeListener} from '@angular/common';\nimport {EventEmitter, Injectable} from '@angular/core';\nimport {ɵBrowserPlatformLocation as BrowserPlatformLocation} from '@angular/platform-browser';\nimport {MessageBus} from '../shared/message_bus';\nimport {ROUTER_CHANNEL} from '../shared/messaging_api';\nimport {LocationType, Serializer, SerializerTypes} from '../shared/serializer';\nimport {ServiceMessageBroker, ServiceMessageBrokerFactory} from '../shared/service_message_broker';\nexport class MessageBasedPlatformLocation {\nprivate _channelSink: EventEmitter<Object>;\nprivate _broker: ServiceMessageBroker;\n/**\n * @param {?} _brokerFactory\n * @param {?} _platformLocation\n * @param {?} bus\n * @param {?} _serializer\n */\nconstructor(\nprivate _brokerFactory: ServiceMessageBrokerFactory,\nprivate _platformLocation: BrowserPlatformLocation, bus: MessageBus,\nprivate _serializer: Serializer) {\n    this._platformLocation.onPopState(<LocationChangeListener>this._sendUrlChangeEvent.bind(this));\n    this._platformLocation.onHashChange(\n        <LocationChangeListener>this._sendUrlChangeEvent.bind(this));\n    this._broker = this._brokerFactory.createMessageBroker(ROUTER_CHANNEL);\n    this._channelSink = bus.to(ROUTER_CHANNEL);\n  }\n/**\n * @return {?}\n */\nstart(): void {\n    const /** @type {?} */ P = SerializerTypes.PRIMITIVE;\n\n    this._broker.registerMethod('getLocation', null, this._getLocation.bind(this), LocationType);\n    this._broker.registerMethod('setPathname', [P], this._setPathname.bind(this));\n    this._broker.registerMethod(\n        'pushState', [P, P, P], this._platformLocation.pushState.bind(this._platformLocation));\n    this._broker.registerMethod(\n        'replaceState', [P, P, P],\n        this._platformLocation.replaceState.bind(this._platformLocation));\n    this._broker.registerMethod(\n        'forward', null, this._platformLocation.forward.bind(this._platformLocation));\n    this._broker.registerMethod(\n        'back', null, this._platformLocation.back.bind(this._platformLocation));\n  }\n/**\n * @return {?}\n */\nprivate _getLocation(): Promise<Location> {\n    return Promise.resolve(this._platformLocation.location);\n  }\n/**\n * @param {?} e\n * @return {?}\n */\nprivate _sendUrlChangeEvent(e: Event): void {\n    this._channelSink.emit({\n      'event': {'type': e.type},\n      'location': this._serializer.serialize(this._platformLocation.location, LocationType),\n    });\n  }\n/**\n * @param {?} pathname\n * @return {?}\n */\nprivate _setPathname(pathname: string): void { this._platformLocation.pathname = pathname; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ServiceMessageBrokerFactory, },\n{type: BrowserPlatformLocation, },\n{type: MessageBus, },\n{type: Serializer, },\n];\n}\n\nfunction MessageBasedPlatformLocation_tsickle_Closure_declarations() {\n/** @type {?} */\nMessageBasedPlatformLocation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMessageBasedPlatformLocation.ctorParameters;\n/** @type {?} */\nMessageBasedPlatformLocation.prototype._channelSink;\n/** @type {?} */\nMessageBasedPlatformLocation.prototype._broker;\n/** @type {?} */\nMessageBasedPlatformLocation.prototype._brokerFactory;\n/** @type {?} */\nMessageBasedPlatformLocation.prototype._platformLocation;\n/** @type {?} */\nMessageBasedPlatformLocation.prototype._serializer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\n\nimport {Version} from '@angular/core';\n/**\n * \\@stable\n */\nexport const VERSION = new Version('4.0.0-rc.4-b7212f5');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule, ɵPLATFORM_WORKER_UI_ID as PLATFORM_WORKER_UI_ID} from '@angular/common';\nimport {ErrorHandler, Injectable, InjectionToken, Injector, NgZone, PLATFORM_ID, PLATFORM_INITIALIZER, PlatformRef, Provider, RendererFactory2, RootRenderer, Testability, createPlatformFactory, isDevMode, platformCore, ɵAPP_ID_RANDOM_PROVIDER as APP_ID_RANDOM_PROVIDER} from '@angular/core';\nimport {DOCUMENT, EVENT_MANAGER_PLUGINS, EventManager, HAMMER_GESTURE_CONFIG, HammerGestureConfig, ɵBROWSER_SANITIZATION_PROVIDERS as BROWSER_SANITIZATION_PROVIDERS, ɵBrowserDomAdapter as BrowserDomAdapter, ɵBrowserGetTestability as BrowserGetTestability, ɵDomEventsPlugin as DomEventsPlugin, ɵDomRendererFactory2 as DomRendererFactory2, ɵDomSharedStylesHost as DomSharedStylesHost, ɵHammerGesturesPlugin as HammerGesturesPlugin, ɵKeyEventsPlugin as KeyEventsPlugin, ɵSharedStylesHost as SharedStylesHost, ɵgetDOM as getDOM} from '@angular/platform-browser';\n\nimport {ON_WEB_WORKER} from './web_workers/shared/api';\nimport {ClientMessageBrokerFactory, ClientMessageBrokerFactory_} from './web_workers/shared/client_message_broker';\nimport {MessageBus} from './web_workers/shared/message_bus';\nimport {PostMessageBus, PostMessageBusSink, PostMessageBusSource} from './web_workers/shared/post_message_bus';\nimport {RenderStore} from './web_workers/shared/render_store';\nimport {Serializer} from './web_workers/shared/serializer';\nimport {ServiceMessageBrokerFactory, ServiceMessageBrokerFactory_} from './web_workers/shared/service_message_broker';\nimport {MessageBasedRenderer2} from './web_workers/ui/renderer';\n/**\n * Wrapper class that exposes the Worker\n * and underlying {\\@link MessageBus} for lower level message passing.\n * \n * \\@experimental WebWorker support is currently experimental.\n */\nexport class WebWorkerInstance {\npublic worker: Worker;\npublic bus: MessageBus;\n/**\n * \\@internal\n * @param {?} worker\n * @param {?} bus\n * @return {?}\n */\npublic init(worker: Worker, bus: MessageBus) {\n    this.worker = worker;\n    this.bus = bus;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction WebWorkerInstance_tsickle_Closure_declarations() {\n/** @type {?} */\nWebWorkerInstance.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWebWorkerInstance.ctorParameters;\n/** @type {?} */\nWebWorkerInstance.prototype.worker;\n/** @type {?} */\nWebWorkerInstance.prototype.bus;\n}\n\n/**\n * \\@experimental WebWorker support is currently experimental.\n */\nexport const WORKER_SCRIPT = new InjectionToken<string>('WebWorkerScript');\n/**\n * A multi-provider used to automatically call the `start()` method after the service is\n * created.\n * \n * \\@experimental WebWorker support is currently experimental.\n */\nexport const WORKER_UI_STARTABLE_MESSAGING_SERVICE =\n    new InjectionToken<({start: () => void})[]>('WorkerRenderStartableMsgService');\n\nexport const /** @type {?} */ _WORKER_UI_PLATFORM_PROVIDERS: Provider[] = [\n  {provide: NgZone, useFactory: createNgZone, deps: []},\n  MessageBasedRenderer2,\n  {provide: WORKER_UI_STARTABLE_MESSAGING_SERVICE, useExisting: MessageBasedRenderer2, multi: true},\n  BROWSER_SANITIZATION_PROVIDERS,\n  {provide: ErrorHandler, useFactory: _exceptionHandler, deps: []},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n  // TODO(jteplitz602): Investigate if we definitely need EVENT_MANAGER on the render thread\n  // #5298\n  {provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true},\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true},\n  {provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true},\n  {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig},\n  APP_ID_RANDOM_PROVIDER,\n  DomRendererFactory2,\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: SharedStylesHost, useExisting: DomSharedStylesHost},\n  {provide: ServiceMessageBrokerFactory, useClass: ServiceMessageBrokerFactory_},\n  {provide: ClientMessageBrokerFactory, useClass: ClientMessageBrokerFactory_},\n  Serializer,\n  {provide: ON_WEB_WORKER, useValue: false},\n  RenderStore,\n  DomSharedStylesHost,\n  Testability,\n  EventManager,\n  WebWorkerInstance,\n  {\n    provide: PLATFORM_INITIALIZER,\n    useFactory: initWebWorkerRenderPlatform,\n    multi: true,\n    deps: [Injector]\n  },\n  {provide: PLATFORM_ID, useValue: PLATFORM_WORKER_UI_ID},\n  {provide: MessageBus, useFactory: messageBusFactory, deps: [WebWorkerInstance]},\n];\n/**\n * @param {?} injector\n * @return {?}\n */\nfunction initializeGenericWorkerRenderer(injector: Injector) {\n  const /** @type {?} */ bus = injector.get(MessageBus);\n  const /** @type {?} */ zone = injector.get(NgZone);\n  bus.attachToZone(zone);\n\n  // initialize message services after the bus has been created\n  const /** @type {?} */ services = injector.get(WORKER_UI_STARTABLE_MESSAGING_SERVICE);\n  zone.runGuarded(() => { services.forEach((svc: any) => { svc.start(); }); });\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction messageBusFactory(instance: WebWorkerInstance): MessageBus {\n  return instance.bus;\n}\n/**\n * @param {?} injector\n * @return {?}\n */\nfunction initWebWorkerRenderPlatform(injector: Injector): () => void {\n  return () => {\n    BrowserDomAdapter.makeCurrent();\n    BrowserGetTestability.init();\n    let /** @type {?} */ scriptUri: string;\n    try {\n      scriptUri = injector.get(WORKER_SCRIPT);\n    } catch ( /** @type {?} */e) {\n      throw new Error(\n          'You must provide your WebWorker\\'s initialization script with the WORKER_SCRIPT token');\n    }\n\n    const /** @type {?} */ instance = injector.get(WebWorkerInstance);\n    spawnWebWorker(scriptUri, instance);\n\n    initializeGenericWorkerRenderer(injector);\n  };\n}\n/**\n * \\@experimental WebWorker support is currently experimental.\n */\nexport const platformWorkerUi =\n    createPlatformFactory(platformCore, 'workerUi', _WORKER_UI_PLATFORM_PROVIDERS);\n/**\n * @return {?}\n */\nfunction _exceptionHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n/**\n * @return {?}\n */\nfunction _document(): any {\n  return document;\n}\n/**\n * @return {?}\n */\nfunction createNgZone(): NgZone {\n  return new NgZone({enableLongStackTrace: isDevMode()});\n}\n/**\n * Spawns a new class and initializes the WebWorkerInstance\n * @param {?} uri\n * @param {?} instance\n * @return {?}\n */\nfunction spawnWebWorker(uri: string, instance: WebWorkerInstance): void {\n  const /** @type {?} */ webWorker: Worker = new Worker(uri);\n  const /** @type {?} */ sink = new PostMessageBusSink(webWorker);\n  const /** @type {?} */ source = new PostMessageBusSource(webWorker);\n  const /** @type {?} */ bus = new PostMessageBus(sink, source);\n\n  instance.init(webWorker, bus);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, RenderComponentType, Renderer, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, RootRenderer} from '@angular/core';\n\nimport {MessageBus} from '../shared/message_bus';\nimport {EVENT_2_CHANNEL, RENDERER_2_CHANNEL} from '../shared/messaging_api';\nimport {RenderStore} from '../shared/render_store';\nimport {Serializer, SerializerTypes} from '../shared/serializer';\nimport {ServiceMessageBroker, ServiceMessageBrokerFactory} from '../shared/service_message_broker';\nimport {EventDispatcher} from '../ui/event_dispatcher';\nexport class MessageBasedRenderer2 {\nprivate _eventDispatcher: EventDispatcher;\n/**\n * @param {?} _brokerFactory\n * @param {?} _bus\n * @param {?} _serializer\n * @param {?} _renderStore\n * @param {?} _rendererFactory\n */\nconstructor(\nprivate _brokerFactory: ServiceMessageBrokerFactory,\nprivate _bus: MessageBus,\nprivate _serializer: Serializer,\nprivate _renderStore: RenderStore,\nprivate _rendererFactory: RendererFactory2) {}\n/**\n * @return {?}\n */\nstart(): void {\n    const /** @type {?} */ broker = this._brokerFactory.createMessageBroker(RENDERER_2_CHANNEL);\n\n    this._bus.initChannel(EVENT_2_CHANNEL);\n    this._eventDispatcher = new EventDispatcher(this._bus.to(EVENT_2_CHANNEL), this._serializer);\n\n    const [RSO, P, CRT] = [\n      SerializerTypes.RENDER_STORE_OBJECT,\n      SerializerTypes.PRIMITIVE,\n      SerializerTypes.RENDERER_TYPE_2,\n    ];\n\n    const /** @type {?} */ methods: any[][] = [\n      ['createRenderer', this.createRenderer, RSO, CRT, P],\n      ['createElement', this.createElement, RSO, P, P, P],\n      ['createComment', this.createComment, RSO, P, P], ['createText', this.createText, RSO, P, P],\n      ['appendChild', this.appendChild, RSO, RSO, RSO],\n      ['insertBefore', this.insertBefore, RSO, RSO, RSO, RSO],\n      ['removeChild', this.removeChild, RSO, RSO, RSO],\n      ['selectRootElement', this.selectRootElement, RSO, P, P],\n      ['parentNode', this.parentNode, RSO, RSO, P], ['nextSibling', this.nextSibling, RSO, RSO, P],\n      ['setAttribute', this.setAttribute, RSO, RSO, P, P, P],\n      ['removeAttribute', this.removeAttribute, RSO, RSO, P, P],\n      ['addClass', this.addClass, RSO, RSO, P], ['removeClass', this.removeClass, RSO, RSO, P],\n      ['setStyle', this.setStyle, RSO, RSO, P, P, P],\n      ['removeStyle', this.removeStyle, RSO, RSO, P, P],\n      ['setProperty', this.setProperty, RSO, RSO, P, P], ['setValue', this.setValue, RSO, RSO, P],\n      ['listen', this.listen, RSO, RSO, P, P, P], ['unlisten', this.unlisten, RSO, RSO],\n      ['destroy', this.destroy, RSO], ['destroyNode', this.destroyNode, RSO, P]\n\n    ];\n\n    methods.forEach(([name, method, ...argTypes]: any[]) => {\n      broker.registerMethod(name, argTypes, method.bind(this));\n    });\n  }\n/**\n * @param {?} r\n * @return {?}\n */\nprivate destroy(r: Renderer2) { r.destroy(); }\n/**\n * @param {?} r\n * @param {?} node\n * @return {?}\n */\nprivate destroyNode(r: Renderer2, node: any) {\n    if (r.destroyNode) {\n      r.destroyNode(node);\n    }\n    this._renderStore.remove(node);\n  }\n/**\n * @param {?} el\n * @param {?} type\n * @param {?} id\n * @return {?}\n */\nprivate createRenderer(el: any, type: RendererType2, id: number) {\n    this._renderStore.store(this._rendererFactory.createRenderer(el, type), id);\n  }\n/**\n * @param {?} r\n * @param {?} name\n * @param {?} namespace\n * @param {?} id\n * @return {?}\n */\nprivate createElement(r: Renderer2, name: string, namespace: string, id: number) {\n    this._renderStore.store(r.createElement(name, namespace), id);\n  }\n/**\n * @param {?} r\n * @param {?} value\n * @param {?} id\n * @return {?}\n */\nprivate createComment(r: Renderer2, value: string, id: number) {\n    this._renderStore.store(r.createComment(value), id);\n  }\n/**\n * @param {?} r\n * @param {?} value\n * @param {?} id\n * @return {?}\n */\nprivate createText(r: Renderer2, value: string, id: number) {\n    this._renderStore.store(r.createText(value), id);\n  }\n/**\n * @param {?} r\n * @param {?} parent\n * @param {?} child\n * @return {?}\n */\nprivate appendChild(r: Renderer2, parent: any, child: any) { r.appendChild(parent, child); }\n/**\n * @param {?} r\n * @param {?} parent\n * @param {?} child\n * @param {?} ref\n * @return {?}\n */\nprivate insertBefore(r: Renderer2, parent: any, child: any, ref: any) {\n    r.insertBefore(parent, child, ref);\n  }\n/**\n * @param {?} r\n * @param {?} parent\n * @param {?} child\n * @return {?}\n */\nprivate removeChild(r: Renderer2, parent: any, child: any) { r.removeChild(parent, child); }\n/**\n * @param {?} r\n * @param {?} selector\n * @param {?} id\n * @return {?}\n */\nprivate selectRootElement(r: Renderer2, selector: string, id: number) {\n    this._renderStore.store(r.selectRootElement(selector), id);\n  }\n/**\n * @param {?} r\n * @param {?} node\n * @param {?} id\n * @return {?}\n */\nprivate parentNode(r: Renderer2, node: any, id: number) {\n    this._renderStore.store(r.parentNode(node), id);\n  }\n/**\n * @param {?} r\n * @param {?} node\n * @param {?} id\n * @return {?}\n */\nprivate nextSibling(r: Renderer2, node: any, id: number) {\n    this._renderStore.store(r.nextSibling(node), id);\n  }\n/**\n * @param {?} r\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @param {?} namespace\n * @return {?}\n */\nprivate setAttribute(r: Renderer2, el: any, name: string, value: string, namespace: string) {\n    r.setAttribute(el, name, value, namespace);\n  }\n/**\n * @param {?} r\n * @param {?} el\n * @param {?} name\n * @param {?} namespace\n * @return {?}\n */\nprivate removeAttribute(r: Renderer2, el: any, name: string, namespace: string) {\n    r.removeAttribute(el, name, namespace);\n  }\n/**\n * @param {?} r\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\nprivate addClass(r: Renderer2, el: any, name: string) { r.addClass(el, name); }\n/**\n * @param {?} r\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\nprivate removeClass(r: Renderer2, el: any, name: string) { r.removeClass(el, name); }\n/**\n * @param {?} r\n * @param {?} el\n * @param {?} style\n * @param {?} value\n * @param {?} flags\n * @return {?}\n */\nprivate setStyle(r: Renderer2, el: any, style: string, value: any, flags: RendererStyleFlags2) {\n    r.setStyle(el, style, value, flags);\n  }\n/**\n * @param {?} r\n * @param {?} el\n * @param {?} style\n * @param {?} flags\n * @return {?}\n */\nprivate removeStyle(r: Renderer2, el: any, style: string, flags: RendererStyleFlags2) {\n    r.removeStyle(el, style, flags);\n  }\n/**\n * @param {?} r\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nprivate setProperty(r: Renderer2, el: any, name: string, value: any) {\n    r.setProperty(el, name, value);\n  }\n/**\n * @param {?} r\n * @param {?} node\n * @param {?} value\n * @return {?}\n */\nprivate setValue(r: Renderer2, node: any, value: string) { r.setValue(node, value); }\n/**\n * @param {?} r\n * @param {?} el\n * @param {?} elName\n * @param {?} eventName\n * @param {?} unlistenId\n * @return {?}\n */\nprivate listen(r: Renderer2, el: any, elName: string, eventName: string, unlistenId: number) {\n    const /** @type {?} */ listener = (event: any) => {\n      return this._eventDispatcher.dispatchRenderEvent(el, elName, eventName, event);\n    };\n\n    const /** @type {?} */ unlisten = r.listen(el || elName, eventName, listener);\n    this._renderStore.store(unlisten, unlistenId);\n  }\n/**\n * @param {?} r\n * @param {?} unlisten\n * @return {?}\n */\nprivate unlisten(r: Renderer2, unlisten: () => boolean) { unlisten(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ServiceMessageBrokerFactory, },\n{type: MessageBus, },\n{type: Serializer, },\n{type: RenderStore, },\n{type: RendererFactory2, },\n];\n}\n\nfunction MessageBasedRenderer2_tsickle_Closure_declarations() {\n/** @type {?} */\nMessageBasedRenderer2.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMessageBasedRenderer2.ctorParameters;\n/** @type {?} */\nMessageBasedRenderer2.prototype._eventDispatcher;\n/** @type {?} */\nMessageBasedRenderer2.prototype._brokerFactory;\n/** @type {?} */\nMessageBasedRenderer2.prototype._bus;\n/** @type {?} */\nMessageBasedRenderer2.prototype._serializer;\n/** @type {?} */\nMessageBasedRenderer2.prototype._renderStore;\n/** @type {?} */\nMessageBasedRenderer2.prototype._rendererFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter} from '@angular/core';\nimport {Serializer, SerializerTypes} from '../shared/serializer';\n\nimport {serializeEventWithTarget, serializeGenericEvent, serializeKeyboardEvent, serializeMouseEvent, serializeTransitionEvent} from './event_serializer';\nexport class EventDispatcher {\n/**\n * @param {?} _sink\n * @param {?} _serializer\n */\nconstructor(private _sink: EventEmitter<any>,\nprivate _serializer: Serializer) {}\n/**\n * @param {?} player\n * @param {?} phaseName\n * @param {?} element\n * @return {?}\n */\ndispatchAnimationEvent(player: any, phaseName: string, element: any): boolean {\n    this._sink.emit({\n      'element': this._serializer.serialize(element, SerializerTypes.RENDER_STORE_OBJECT),\n      'animationPlayer': this._serializer.serialize(player, SerializerTypes.RENDER_STORE_OBJECT),\n      'phaseName': phaseName,\n    });\n    return true;\n  }\n/**\n * @param {?} element\n * @param {?} eventTarget\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\ndispatchRenderEvent(element: any, eventTarget: string, eventName: string, event: any): boolean {\n    let /** @type {?} */ serializedEvent: any;\n    // TODO (jteplitz602): support custom events #3350\n    switch (event.type) {\n      case 'click':\n      case 'mouseup':\n      case 'mousedown':\n      case 'dblclick':\n      case 'contextmenu':\n      case 'mouseenter':\n      case 'mouseleave':\n      case 'mousemove':\n      case 'mouseout':\n      case 'mouseover':\n      case 'show':\n        serializedEvent = serializeMouseEvent(event);\n        break;\n      case 'keydown':\n      case 'keypress':\n      case 'keyup':\n        serializedEvent = serializeKeyboardEvent(event);\n        break;\n      case 'input':\n      case 'change':\n      case 'blur':\n        serializedEvent = serializeEventWithTarget(event);\n        break;\n      case 'abort':\n      case 'afterprint':\n      case 'beforeprint':\n      case 'cached':\n      case 'canplay':\n      case 'canplaythrough':\n      case 'chargingchange':\n      case 'chargingtimechange':\n      case 'close':\n      case 'dischargingtimechange':\n      case 'DOMContentLoaded':\n      case 'downloading':\n      case 'durationchange':\n      case 'emptied':\n      case 'ended':\n      case 'error':\n      case 'fullscreenchange':\n      case 'fullscreenerror':\n      case 'invalid':\n      case 'languagechange':\n      case 'levelfchange':\n      case 'loadeddata':\n      case 'loadedmetadata':\n      case 'obsolete':\n      case 'offline':\n      case 'online':\n      case 'open':\n      case 'orientatoinchange':\n      case 'pause':\n      case 'pointerlockchange':\n      case 'pointerlockerror':\n      case 'play':\n      case 'playing':\n      case 'ratechange':\n      case 'readystatechange':\n      case 'reset':\n      case 'scroll':\n      case 'seeked':\n      case 'seeking':\n      case 'stalled':\n      case 'submit':\n      case 'success':\n      case 'suspend':\n      case 'timeupdate':\n      case 'updateready':\n      case 'visibilitychange':\n      case 'volumechange':\n      case 'waiting':\n        serializedEvent = serializeGenericEvent(event);\n        break;\n      case 'transitionend':\n        serializedEvent = serializeTransitionEvent(event);\n        break;\n      default:\n        throw new Error(eventName + ' not supported on WebWorkers');\n    }\n\n    this._sink.emit({\n      'element': this._serializer.serialize(element, SerializerTypes.RENDER_STORE_OBJECT),\n      'eventName': eventName,\n      'eventTarget': eventTarget,\n      'event': serializedEvent,\n    });\n\n    // TODO(kegluneq): Eventually, we want the user to indicate from the UI side whether the event\n    // should be canceled, but for now just call `preventDefault` on the original DOM event.\n    return false;\n  }\n}\n\nfunction EventDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nEventDispatcher.prototype._sink;\n/** @type {?} */\nEventDispatcher.prototype._serializer;\n}\n\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MOUSE_EVENT_PROPERTIES = [\n  'altKey', 'button', 'clientX', 'clientY', 'metaKey', 'movementX', 'movementY', 'offsetX',\n  'offsetY', 'region', 'screenX', 'screenY', 'shiftKey'\n];\n\nconst /** @type {?} */ KEYBOARD_EVENT_PROPERTIES = [\n  'altkey', 'charCode', 'code', 'ctrlKey', 'isComposing', 'key', 'keyCode', 'location', 'metaKey',\n  'repeat', 'shiftKey', 'which'\n];\n\nconst /** @type {?} */ TRANSITION_EVENT_PROPERTIES = ['propertyName', 'elapsedTime', 'pseudoElement'];\n\nconst /** @type {?} */ EVENT_PROPERTIES = ['type', 'bubbles', 'cancelable'];\n\nconst /** @type {?} */ NODES_WITH_VALUE = new Set(\n    ['input', 'select', 'option', 'button', 'li', 'meter', 'progress', 'param', 'textarea']);\n/**\n * @param {?} e\n * @return {?}\n */\nexport function serializeGenericEvent(e: Event): {[key: string]: any} {\n  return serializeEvent(e, EVENT_PROPERTIES);\n}\n/**\n * @param {?} e\n * @return {?}\n */\nexport function serializeEventWithTarget(e: Event): {[key: string]: any} {\n  const /** @type {?} */ serializedEvent = serializeEvent(e, EVENT_PROPERTIES);\n  return addTarget(e, serializedEvent);\n}\n/**\n * @param {?} e\n * @return {?}\n */\nexport function serializeMouseEvent(e: MouseEvent): {[key: string]: any} {\n  return serializeEvent(e, MOUSE_EVENT_PROPERTIES);\n}\n/**\n * @param {?} e\n * @return {?}\n */\nexport function serializeKeyboardEvent(e: KeyboardEvent): {[key: string]: any} {\n  const /** @type {?} */ serializedEvent = serializeEvent(e, KEYBOARD_EVENT_PROPERTIES);\n  return addTarget(e, serializedEvent);\n}\n/**\n * @param {?} e\n * @return {?}\n */\nexport function serializeTransitionEvent(e: TransitionEvent): {[key: string]: any} {\n  const /** @type {?} */ serializedEvent = serializeEvent(e, TRANSITION_EVENT_PROPERTIES);\n  return addTarget(e, serializedEvent);\n}\n/**\n * @param {?} e\n * @param {?} serializedEvent\n * @return {?}\n */\nfunction addTarget(e: Event, serializedEvent: {[key: string]: any}): {[key: string]: any} {\n  if (NODES_WITH_VALUE.has(( /** @type {?} */((<HTMLElement>e.target))).tagName.toLowerCase())) {\n    const /** @type {?} */ target = /** @type {?} */(( <HTMLInputElement>e.target));\n    serializedEvent['target'] = {'value': target.value};\n    if (target.files) {\n      serializedEvent['target']['files'] = target.files;\n    }\n  }\n  return serializedEvent;\n}\n/**\n * @param {?} e\n * @param {?} properties\n * @return {?}\n */\nfunction serializeEvent(e: any, properties: string[]): {[key: string]: any} {\n  const /** @type {?} */ serialized: {[k: string]: any} = {};\n  for (let /** @type {?} */ i = 0; i < properties.length; i++) {\n    const /** @type {?} */ prop = properties[i];\n    serialized[prop] = e[prop];\n  }\n  return serialized;\n}\n","\n/**\n * All channels used by angular's WebWorker components are listed here.\n * You should not use these channels in your application code.\n */\nexport const RENDERER_2_CHANNEL = 'v2.ng-Renderer';\nexport const /** @type {?} */ EVENT_2_CHANNEL = 'v2.ng-Events';\n\nexport const /** @type {?} */ ROUTER_CHANNEL = 'ng-Router';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {EventEmitter, Injectable, Type} from '@angular/core';\nimport {MessageBus} from '../shared/message_bus';\nimport {Serializer, SerializerTypes} from '../shared/serializer';\n/**\n * \\@experimental WebWorker support in Angular is currently experimental.\n * @abstract\n */\nexport abstract class ServiceMessageBrokerFactory {\n/**\n * Initializes the given channel and attaches a new {\\@link ServiceMessageBroker} to it.\n * @abstract\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone?: boolean) {}\n}\nexport class ServiceMessageBrokerFactory_ extends ServiceMessageBrokerFactory {\n/**\n * \\@internal\n */\n_serializer: Serializer;\n/**\n * @param {?} _messageBus\n * @param {?} _serializer\n */\nconstructor(private _messageBus: MessageBus, _serializer: Serializer) {\n    super();\n    this._serializer = _serializer;\n  }\n/**\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone: boolean = true): ServiceMessageBroker {\n    this._messageBus.initChannel(channel, runInZone);\n    return new ServiceMessageBroker_(this._messageBus, this._serializer, channel);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MessageBus, },\n{type: Serializer, },\n];\n}\n\nfunction ServiceMessageBrokerFactory__tsickle_Closure_declarations() {\n/** @type {?} */\nServiceMessageBrokerFactory_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nServiceMessageBrokerFactory_.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nServiceMessageBrokerFactory_.prototype._serializer;\n/** @type {?} */\nServiceMessageBrokerFactory_.prototype._messageBus;\n}\n\n/**\n * Helper class for UIComponents that allows components to register methods.\n * If a registered method message is received from the broker on the worker,\n * the UIMessageBroker deserializes its arguments and calls the registered method.\n * If that method returns a promise, the UIMessageBroker returns the result to the worker.\n * \n * \\@experimental WebWorker support in Angular is currently experimental.\n * @abstract\n */\nexport abstract class ServiceMessageBroker {\n/**\n * @abstract\n * @param {?} methodName\n * @param {?} signature\n * @param {?} method\n * @param {?=} returnType\n * @return {?}\n */\nregisterMethod(\n      methodName: string, signature: Array<Type<any>|SerializerTypes>, method: Function,\n      returnType?: Type<any>|SerializerTypes) {}\n}\nexport class ServiceMessageBroker_ extends ServiceMessageBroker {\nprivate _sink: EventEmitter<any>;\nprivate _methods = new Map<string, Function>();\n/**\n * @param {?} messageBus\n * @param {?} _serializer\n * @param {?} channel\n */\nconstructor(messageBus: MessageBus,\nprivate _serializer: Serializer,\npublic channel: string) {\n    super();\n    this._sink = messageBus.to(channel);\n    const source = messageBus.from(channel);\n    source.subscribe({next: (message: any) => this._handleMessage(message)});\n  }\n/**\n * @param {?} methodName\n * @param {?} signature\n * @param {?} method\n * @param {?=} returnType\n * @return {?}\n */\nregisterMethod(\n      methodName: string, signature: Array<Type<any>|SerializerTypes>,\n      method: (..._: any[]) => Promise<any>| void, returnType?: Type<any>|SerializerTypes): void {\n    this._methods.set(methodName, (message: ReceivedMessage) => {\n      const /** @type {?} */ serializedArgs = message.args;\n      const /** @type {?} */ numArgs = signature ? signature.length : 0;\n      const /** @type {?} */ deserializedArgs = new Array(numArgs);\n      for (let /** @type {?} */ i = 0; i < numArgs; i++) {\n        const /** @type {?} */ serializedArg = serializedArgs[i];\n        deserializedArgs[i] = this._serializer.deserialize(serializedArg, signature[i]);\n      }\n\n      const /** @type {?} */ promise = method(...deserializedArgs);\n      if (returnType && promise) {\n        this._wrapWebWorkerPromise(message.id, promise, returnType);\n      }\n    });\n  }\n/**\n * @param {?} message\n * @return {?}\n */\nprivate _handleMessage(message: ReceivedMessage): void {\n    if (this._methods.has(message.method)) {\n      this._methods.get(message.method)(message);\n    }\n  }\n/**\n * @param {?} id\n * @param {?} promise\n * @param {?} type\n * @return {?}\n */\nprivate _wrapWebWorkerPromise(id: string, promise: Promise<any>, type: Type<any>|SerializerTypes):\n      void {\n    promise.then((result: any) => {\n      this._sink.emit({\n        'type': 'result',\n        'value': this._serializer.serialize(result, type),\n        'id': id,\n      });\n    });\n  }\n}\n\nfunction ServiceMessageBroker__tsickle_Closure_declarations() {\n/** @type {?} */\nServiceMessageBroker_.prototype._sink;\n/** @type {?} */\nServiceMessageBroker_.prototype._methods;\n/** @type {?} */\nServiceMessageBroker_.prototype._serializer;\n/** @type {?} */\nServiceMessageBroker_.prototype.channel;\n}\n\n\n/**\n * @experimental WebWorker support in Angular is currently experimental.\n */\nexport interface ReceivedMessage {\n  method: string;\n  args: any[];\n  id: string;\n  type: string;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {EventEmitter, Injectable, NgZone} from '@angular/core';\n\nimport {MessageBus, MessageBusSink, MessageBusSource} from './message_bus';\n\n\n\n// TODO(jteplitz602) Replace this with the definition in lib.webworker.d.ts(#3492)\nexport interface PostMessageTarget {\n  postMessage: (message: any, transfer?: [ArrayBuffer]) => void;\n}\nexport class PostMessageBusSink implements MessageBusSink {\nprivate _zone: NgZone;\nprivate _channels: {[key: string]: _Channel} = {};\nprivate _messageBuffer: Array<Object> = [];\n/**\n * @param {?} _postMessageTarget\n */\nconstructor(private _postMessageTarget: PostMessageTarget) {}\n/**\n * @param {?} zone\n * @return {?}\n */\nattachToZone(zone: NgZone): void {\n    this._zone = zone;\n    this._zone.runOutsideAngular(\n        () => { this._zone.onStable.subscribe({next: () => { this._handleOnEventDone(); }}); });\n  }\n/**\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ninitChannel(channel: string, runInZone: boolean = true): void {\n    if (this._channels.hasOwnProperty(channel)) {\n      throw new Error(`${channel} has already been initialized`);\n    }\n\n    const /** @type {?} */ emitter = new EventEmitter(false);\n    const /** @type {?} */ channelInfo = new _Channel(emitter, runInZone);\n    this._channels[channel] = channelInfo;\n    emitter.subscribe((data: Object) => {\n      const /** @type {?} */ message = {channel: channel, message: data};\n      if (runInZone) {\n        this._messageBuffer.push(message);\n      } else {\n        this._sendMessages([message]);\n      }\n    });\n  }\n/**\n * @param {?} channel\n * @return {?}\n */\nto(channel: string): EventEmitter<any> {\n    if (this._channels.hasOwnProperty(channel)) {\n      return this._channels[channel].emitter;\n    } else {\n      throw new Error(`${channel} is not set up. Did you forget to call initChannel?`);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _handleOnEventDone() {\n    if (this._messageBuffer.length > 0) {\n      this._sendMessages(this._messageBuffer);\n      this._messageBuffer = [];\n    }\n  }\n/**\n * @param {?} messages\n * @return {?}\n */\nprivate _sendMessages(messages: Array<Object>) { this._postMessageTarget.postMessage(messages); }\n}\n\nfunction PostMessageBusSink_tsickle_Closure_declarations() {\n/** @type {?} */\nPostMessageBusSink.prototype._zone;\n/** @type {?} */\nPostMessageBusSink.prototype._channels;\n/** @type {?} */\nPostMessageBusSink.prototype._messageBuffer;\n/** @type {?} */\nPostMessageBusSink.prototype._postMessageTarget;\n}\n\nexport class PostMessageBusSource implements MessageBusSource {\nprivate _zone: NgZone;\nprivate _channels: {[key: string]: _Channel} = {};\n/**\n * @param {?=} eventTarget\n */\nconstructor(eventTarget?: EventTarget) {\n    if (eventTarget) {\n      eventTarget.addEventListener('message', (ev: MessageEvent) => this._handleMessages(ev));\n    } else {\n      // if no eventTarget is given we assume we're in a WebWorker and listen on the global scope\n      const workerScope = <EventTarget>self;\n      workerScope.addEventListener('message', (ev: MessageEvent) => this._handleMessages(ev));\n    }\n  }\n/**\n * @param {?} zone\n * @return {?}\n */\nattachToZone(zone: NgZone) { this._zone = zone; }\n/**\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ninitChannel(channel: string, runInZone: boolean = true) {\n    if (this._channels.hasOwnProperty(channel)) {\n      throw new Error(`${channel} has already been initialized`);\n    }\n\n    const /** @type {?} */ emitter = new EventEmitter(false);\n    const /** @type {?} */ channelInfo = new _Channel(emitter, runInZone);\n    this._channels[channel] = channelInfo;\n  }\n/**\n * @param {?} channel\n * @return {?}\n */\nfrom(channel: string): EventEmitter<any> {\n    if (this._channels.hasOwnProperty(channel)) {\n      return this._channels[channel].emitter;\n    } else {\n      throw new Error(`${channel} is not set up. Did you forget to call initChannel?`);\n    }\n  }\n/**\n * @param {?} ev\n * @return {?}\n */\nprivate _handleMessages(ev: MessageEvent): void {\n    const /** @type {?} */ messages = ev.data;\n    for (let /** @type {?} */ i = 0; i < messages.length; i++) {\n      this._handleMessage(messages[i]);\n    }\n  }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate _handleMessage(data: any): void {\n    const /** @type {?} */ channel = data.channel;\n    if (this._channels.hasOwnProperty(channel)) {\n      const /** @type {?} */ channelInfo = this._channels[channel];\n      if (channelInfo.runInZone) {\n        this._zone.run(() => { channelInfo.emitter.emit(data.message); });\n      } else {\n        channelInfo.emitter.emit(data.message);\n      }\n    }\n  }\n}\n\nfunction PostMessageBusSource_tsickle_Closure_declarations() {\n/** @type {?} */\nPostMessageBusSource.prototype._zone;\n/** @type {?} */\nPostMessageBusSource.prototype._channels;\n}\n\n/**\n * A TypeScript implementation of {\\@link MessageBus} for communicating via JavaScript's\n * postMessage API.\n */\nexport class PostMessageBus implements MessageBus {\n/**\n * @param {?} sink\n * @param {?} source\n */\nconstructor(public sink: PostMessageBusSink,\npublic source: PostMessageBusSource) {}\n/**\n * @param {?} zone\n * @return {?}\n */\nattachToZone(zone: NgZone): void {\n    this.source.attachToZone(zone);\n    this.sink.attachToZone(zone);\n  }\n/**\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ninitChannel(channel: string, runInZone: boolean = true): void {\n    this.source.initChannel(channel, runInZone);\n    this.sink.initChannel(channel, runInZone);\n  }\n/**\n * @param {?} channel\n * @return {?}\n */\nfrom(channel: string): EventEmitter<any> { return this.source.from(channel); }\n/**\n * @param {?} channel\n * @return {?}\n */\nto(channel: string): EventEmitter<any> { return this.sink.to(channel); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: PostMessageBusSink, },\n{type: PostMessageBusSource, },\n];\n}\n\nfunction PostMessageBus_tsickle_Closure_declarations() {\n/** @type {?} */\nPostMessageBus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPostMessageBus.ctorParameters;\n/** @type {?} */\nPostMessageBus.prototype.sink;\n/** @type {?} */\nPostMessageBus.prototype.source;\n}\n\n/**\n * Helper class that wraps a channel's {\\@link EventEmitter} and\n * keeps track of if it should run in the zone.\n */\nclass _Channel {\n/**\n * @param {?} emitter\n * @param {?} runInZone\n */\nconstructor(public emitter: EventEmitter<any>,\npublic runInZone: boolean) {}\n}\n\nfunction _Channel_tsickle_Closure_declarations() {\n/** @type {?} */\n_Channel.prototype.emitter;\n/** @type {?} */\n_Channel.prototype.runInZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {EventEmitter, Injectable, Type, ɵstringify as stringify} from '@angular/core';\nimport {MessageBus} from './message_bus';\nimport {Serializer, SerializerTypes} from './serializer';\n/**\n * \\@experimental WebWorker support in Angular is experimental.\n * @abstract\n */\nexport abstract class ClientMessageBrokerFactory {\n/**\n * Initializes the given channel and attaches a new {\\@link ClientMessageBroker} to it.\n * @abstract\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone?: boolean) {}\n}\nexport class ClientMessageBrokerFactory_ extends ClientMessageBrokerFactory {\n/**\n * \\@internal\n */\n_serializer: Serializer;\n/**\n * @param {?} _messageBus\n * @param {?} _serializer\n */\nconstructor(private _messageBus: MessageBus, _serializer: Serializer) {\n    super();\n    this._serializer = _serializer;\n  }\n/**\n * Initializes the given channel and attaches a new {\\@link ClientMessageBroker} to it.\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone: boolean = true): ClientMessageBroker {\n    this._messageBus.initChannel(channel, runInZone);\n    return new ClientMessageBroker_(this._messageBus, this._serializer, channel);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MessageBus, },\n{type: Serializer, },\n];\n}\n\nfunction ClientMessageBrokerFactory__tsickle_Closure_declarations() {\n/** @type {?} */\nClientMessageBrokerFactory_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nClientMessageBrokerFactory_.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nClientMessageBrokerFactory_.prototype._serializer;\n/** @type {?} */\nClientMessageBrokerFactory_.prototype._messageBus;\n}\n\n/**\n * \\@experimental WebWorker support in Angular is experimental.\n * @abstract\n */\nexport abstract class ClientMessageBroker {\n/**\n * @abstract\n * @param {?} args\n * @param {?} returnType\n * @return {?}\n */\nrunOnService(args: UiArguments, returnType: Type<any>|SerializerTypes) {}\n}\n\ninterface PromiseCompleter {\n  resolve: (result: any) => void;\n  reject: (err: any) => void;\n}\nexport class ClientMessageBroker_ extends ClientMessageBroker {\nprivate _pending = new Map<string, PromiseCompleter>();\nprivate _sink: EventEmitter<any>;\n/**\n * \\@internal\n */\npublic _serializer: Serializer;\n/**\n * @param {?} messageBus\n * @param {?} _serializer\n * @param {?} channel\n */\nconstructor(messageBus: MessageBus, _serializer: Serializer,\npublic channel: any) {\n    super();\n    this._sink = messageBus.to(channel);\n    this._serializer = _serializer;\n    const source = messageBus.from(channel);\n\n    source.subscribe({next: (message: ResponseMessageData) => this._handleMessage(message)});\n  }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate _generateMessageId(name: string): string {\n    const /** @type {?} */ time: string = stringify(new Date().getTime());\n    let /** @type {?} */ iteration: number = 0;\n    let /** @type {?} */ id: string = name + time + stringify(iteration);\n    while (this._pending.has(id)) {\n      id = `${name}${time}${iteration}`;\n      iteration++;\n    }\n    return id;\n  }\n/**\n * @param {?} args\n * @param {?} returnType\n * @return {?}\n */\nrunOnService(args: UiArguments, returnType: Type<any>|SerializerTypes): Promise<any> {\n    const /** @type {?} */ fnArgs: any[] = [];\n    if (args.args) {\n      args.args.forEach(argument => {\n        if (argument.type != null) {\n          fnArgs.push(this._serializer.serialize(argument.value, argument.type));\n        } else {\n          fnArgs.push(argument.value);\n        }\n      });\n    }\n\n    let /** @type {?} */ promise: Promise<any>;\n    let /** @type {?} */ id: string = null;\n    if (returnType != null) {\n      let /** @type {?} */ completer: PromiseCompleter;\n      promise = new Promise((resolve, reject) => { completer = {resolve, reject}; });\n      id = this._generateMessageId(args.method);\n      this._pending.set(id, completer);\n\n      promise.catch((err) => {\n        if (console && console.error) {\n          // tslint:disable-next-line:no-console\n          console.error(err);\n        }\n\n        completer.reject(err);\n      });\n\n      promise = promise.then(\n          (v: any) => this._serializer ? this._serializer.deserialize(v, returnType) : v);\n    } else {\n      promise = null;\n    }\n\n    const /** @type {?} */ message: RequestMessageData = {\n      'method': args.method,\n      'args': fnArgs,\n    };\n    if (id != null) {\n      message['id'] = id;\n    }\n    this._sink.emit(message);\n\n    return promise;\n  }\n/**\n * @param {?} message\n * @return {?}\n */\nprivate _handleMessage(message: ResponseMessageData): void {\n    if (message.type === 'result' || message.type === 'error') {\n      const /** @type {?} */ id = message.id;\n      if (this._pending.has(id)) {\n        if (message.type === 'result') {\n          this._pending.get(id).resolve(message.value);\n        } else {\n          this._pending.get(id).reject(message.value);\n        }\n        this._pending.delete(id);\n      }\n    }\n  }\n}\n\nfunction ClientMessageBroker__tsickle_Closure_declarations() {\n/** @type {?} */\nClientMessageBroker_.prototype._pending;\n/** @type {?} */\nClientMessageBroker_.prototype._sink;\n/**\n * \\@internal\n * @type {?}\n */\nClientMessageBroker_.prototype._serializer;\n/** @type {?} */\nClientMessageBroker_.prototype.channel;\n}\n\n\ninterface RequestMessageData {\n  method: string;\n  args?: any[];\n  id?: string;\n}\n\ninterface ResponseMessageData {\n  type: 'result'|'error';\n  value?: any;\n  id?: string;\n}\n/**\n * \\@experimental WebWorker support in Angular is experimental.\n */\nexport class FnArg {\n/**\n * @param {?} value\n * @param {?=} type\n */\nconstructor(\npublic value: any,\npublic type: Type<any>|SerializerTypes = SerializerTypes.PRIMITIVE) {}\n}\n\nfunction FnArg_tsickle_Closure_declarations() {\n/** @type {?} */\nFnArg.prototype.value;\n/** @type {?} */\nFnArg.prototype.type;\n}\n\n/**\n * \\@experimental WebWorker support in Angular is experimental.\n */\nexport class UiArguments {\n/**\n * @param {?} method\n * @param {?=} args\n */\nconstructor(public method: string,\npublic args?: FnArg[]) {}\n}\n\nfunction UiArguments_tsickle_Closure_declarations() {\n/** @type {?} */\nUiArguments.prototype.method;\n/** @type {?} */\nUiArguments.prototype.args;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, RenderComponentType, RendererType2, Type, ɵstringify as stringify} from '@angular/core';\nimport {RenderStore} from './render_store';\n/**\n * Any type that does not need to be serialized (string, number, boolean)\n * \n * \\@experimental WebWorker support in Angular is currently experimental.\n * @deprecated in v4. Use SerializerTypes.PRIMITIVE instead\n */\nexport const PRIMITIVE = SerializerTypes.PRIMITIVE;\nexport class LocationType {\n/**\n * @param {?} href\n * @param {?} protocol\n * @param {?} host\n * @param {?} hostname\n * @param {?} port\n * @param {?} pathname\n * @param {?} search\n * @param {?} hash\n * @param {?} origin\n */\nconstructor(\npublic href: string,\npublic protocol: string,\npublic host: string,\npublic hostname: string,\npublic port: string,\npublic pathname: string,\npublic search: string,\npublic hash: string,\npublic origin: string) {}\n}\n\nfunction LocationType_tsickle_Closure_declarations() {\n/** @type {?} */\nLocationType.prototype.href;\n/** @type {?} */\nLocationType.prototype.protocol;\n/** @type {?} */\nLocationType.prototype.host;\n/** @type {?} */\nLocationType.prototype.hostname;\n/** @type {?} */\nLocationType.prototype.port;\n/** @type {?} */\nLocationType.prototype.pathname;\n/** @type {?} */\nLocationType.prototype.search;\n/** @type {?} */\nLocationType.prototype.hash;\n/** @type {?} */\nLocationType.prototype.origin;\n}\n\n\n/**\n * @experimental WebWorker support in Angular is currently experimental.\n */\nexport const enum SerializerTypes {\n  // RendererType2\n  RENDERER_TYPE_2,\n  // Primitive types\n  PRIMITIVE,\n  // An object stored in a RenderStore\n  RENDER_STORE_OBJECT,\n}\nexport class Serializer {\n/**\n * @param {?} _renderStore\n */\nconstructor(private _renderStore: RenderStore) {}\n/**\n * @param {?} obj\n * @param {?=} type\n * @return {?}\n */\nserialize(obj: any, type: Type<any>|SerializerTypes = SerializerTypes.PRIMITIVE): Object {\n    if (obj == null || type === SerializerTypes.PRIMITIVE) {\n      return obj;\n    }\n    if (Array.isArray(obj)) {\n      return obj.map(v => this.serialize(v, type));\n    }\n    if (type === SerializerTypes.RENDER_STORE_OBJECT) {\n      return this._renderStore.serialize(obj);\n    }\n    if (type === RenderComponentType) {\n      return this._serializeRenderComponentType(obj);\n    }\n    if (type === SerializerTypes.RENDERER_TYPE_2) {\n      return this._serializeRendererType2(obj);\n    }\n    if (type === LocationType) {\n      return this._serializeLocation(obj);\n    }\n    throw new Error(`No serializer for type ${stringify(type)}`);\n  }\n/**\n * @param {?} map\n * @param {?=} type\n * @param {?=} data\n * @return {?}\n */\ndeserialize(map: any, type: Type<any>|SerializerTypes = SerializerTypes.PRIMITIVE, data?: any):\n      any {\n    if (map == null || type === SerializerTypes.PRIMITIVE) {\n      return map;\n    }\n    if (Array.isArray(map)) {\n      return map.map(val => this.deserialize(val, type, data));\n    }\n    if (type === SerializerTypes.RENDER_STORE_OBJECT) {\n      return this._renderStore.deserialize(map);\n    }\n    if (type === RenderComponentType) {\n      return this._deserializeRenderComponentType(map);\n    }\n    if (type === SerializerTypes.RENDERER_TYPE_2) {\n      return this._deserializeRendererType2(map);\n    }\n    if (type === LocationType) {\n      return this._deserializeLocation(map);\n    }\n    throw new Error(`No deserializer for type ${stringify(type)}`);\n  }\n/**\n * @param {?} loc\n * @return {?}\n */\nprivate _serializeLocation(loc: LocationType): Object {\n    return {\n      'href': loc.href,\n      'protocol': loc.protocol,\n      'host': loc.host,\n      'hostname': loc.hostname,\n      'port': loc.port,\n      'pathname': loc.pathname,\n      'search': loc.search,\n      'hash': loc.hash,\n      'origin': loc.origin,\n    };\n  }\n/**\n * @param {?} loc\n * @return {?}\n */\nprivate _deserializeLocation(loc: {[key: string]: any}): LocationType {\n    return new LocationType(\n        loc['href'], loc['protocol'], loc['host'], loc['hostname'], loc['port'], loc['pathname'],\n        loc['search'], loc['hash'], loc['origin']);\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nprivate _serializeRenderComponentType(type: RenderComponentType): Object {\n    return {\n      'id': type.id,\n      'templateUrl': type.templateUrl,\n      'slotCount': type.slotCount,\n      'encapsulation': this.serialize(type.encapsulation),\n      'styles': this.serialize(type.styles),\n    };\n  }\n/**\n * @param {?} props\n * @return {?}\n */\nprivate _deserializeRenderComponentType(props: {[key: string]: any}): RenderComponentType {\n    return new RenderComponentType(\n        props['id'], props['templateUrl'], props['slotCount'],\n        this.deserialize(props['encapsulation']), this.deserialize(props['styles']), {});\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nprivate _serializeRendererType2(type: RendererType2): {[key: string]: any} {\n    return {\n      'id': type.id,\n      'encapsulation': this.serialize(type.encapsulation),\n      'styles': this.serialize(type.styles),\n      'data': this.serialize(type.data),\n    };\n  }\n/**\n * @param {?} props\n * @return {?}\n */\nprivate _deserializeRendererType2(props: {[key: string]: any}): RendererType2 {\n    return {\n      id: props['id'],\n      encapsulation: props['encapsulation'],\n      styles: this.deserialize(props['styles']),\n      data: this.deserialize(props['data'])\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: RenderStore, },\n];\n}\n\nfunction Serializer_tsickle_Closure_declarations() {\n/** @type {?} */\nSerializer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSerializer.ctorParameters;\n/** @type {?} */\nSerializer.prototype._renderStore;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nexport class RenderStore {\nprivate _nextIndex = 0;\nprivate _lookupById = new Map<number, any>();\nprivate _lookupByObject = new Map<any, number>();\n/**\n * @return {?}\n */\nallocateId(): number { return this._nextIndex++; }\n/**\n * @param {?} obj\n * @param {?} id\n * @return {?}\n */\nstore(obj: any, id: number): void {\n    if (id == null) return;\n    this._lookupById.set(id, obj);\n    this._lookupByObject.set(obj, id);\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nremove(obj: any): void {\n    const /** @type {?} */ index = this._lookupByObject.get(obj);\n    if (index != null) {\n      this._lookupByObject.delete(obj);\n      this._lookupById.delete(index);\n    }\n  }\n/**\n * @param {?} id\n * @return {?}\n */\ndeserialize(id: number): any {\n    return this._lookupById.has(id) ? this._lookupById.get(id) : null;\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nserialize(obj: any): number { return obj == null ? null : this._lookupByObject.get(obj); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RenderStore_tsickle_Closure_declarations() {\n/** @type {?} */\nRenderStore.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRenderStore.ctorParameters;\n/** @type {?} */\nRenderStore.prototype._nextIndex;\n/** @type {?} */\nRenderStore.prototype._lookupById;\n/** @type {?} */\nRenderStore.prototype._lookupByObject;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {EventEmitter, NgZone} from '@angular/core';\n/**\n * Message Bus is a low level API used to communicate between the UI and the background.\n * Communication is based on a channel abstraction. Messages published in a\n * given channel to one MessageBusSink are received on the same channel\n * by the corresponding MessageBusSource.\n * \n * \\@experimental WebWorker support in Angular is currenlty experimental.\n * @abstract\n */\nexport abstract class MessageBus implements MessageBusSource, MessageBusSink {\n/**\n * Sets up a new channel on the MessageBus.\n * MUST be called before calling from or to on the channel.\n * If runInZone is true then the source will emit events inside the angular zone\n * and the sink will buffer messages and send only once the zone exits.\n * if runInZone is false then the source will emit events inside the global zone\n * and the sink will send messages immediately.\n * @abstract\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ninitChannel(channel: string, runInZone?: boolean) {}\n/**\n * Assigns this bus to the given zone.\n * Any callbacks attached to channels where runInZone was set to true on initialization\n * will be executed in the given zone.\n * @abstract\n * @param {?} zone\n * @return {?}\n */\nattachToZone(zone: NgZone) {}\n/**\n * Returns an {\\@link EventEmitter} that emits every time a message\n * is received on the given channel.\n * @abstract\n * @param {?} channel\n * @return {?}\n */\nfrom(channel: string) {}\n/**\n * Returns an {\\@link EventEmitter} for the given channel\n * To publish methods to that channel just call next on the returned emitter\n * @abstract\n * @param {?} channel\n * @return {?}\n */\nto(channel: string) {}\n}\n\n/**\n * @experimental WebWorker support in Angular is currenlty experimental.\n */\nexport interface MessageBusSource {\n  /**\n   * Sets up a new channel on the MessageBusSource.\n   * MUST be called before calling from on the channel.\n   * If runInZone is true then the source will emit events inside the angular zone.\n   * if runInZone is false then the source will emit events inside the global zone.\n   */\n  initChannel(channel: string, runInZone: boolean): void;\n\n  /**\n   * Assigns this source to the given zone.\n   * Any channels which are initialized with runInZone set to true will emit events that will be\n   * executed within the given zone.\n   */\n  attachToZone(zone: NgZone): void;\n\n  /**\n   * Returns an {@link EventEmitter} that emits every time a message\n   * is received on the given channel.\n   */\n  from(channel: string): EventEmitter<any>;\n}\n\n/**\n * @experimental WebWorker support in Angular is currenlty experimental.\n */\nexport interface MessageBusSink {\n  /**\n   * Sets up a new channel on the MessageBusSink.\n   * MUST be called before calling to on the channel.\n   * If runInZone is true the sink will buffer messages and send only once the zone exits.\n   * if runInZone is false the sink will send messages immediatly.\n   */\n  initChannel(channel: string, runInZone: boolean): void;\n\n  /**\n   * Assigns this sink to the given zone.\n   * Any channels which are initialized with runInZone set to true will wait for the given zone\n   * to exit before sending messages.\n   */\n  attachToZone(zone: NgZone): void;\n\n  /**\n   * Returns an {@link EventEmitter} for the given channel\n   * To publish methods to that channel just call next on the returned emitter\n   */\n  to(channel: string): EventEmitter<any>;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\n\nexport const /** @type {?} */ ON_WEB_WORKER = new InjectionToken<boolean>('WebWorker.onWebWorker');\n"],"names":["BROWSER_SANITIZATION_PROVIDERS","DomSharedStylesHost","SharedStylesHost","DomRendererFactory2","APP_ID_RANDOM_PROVIDER","HammerGesturesPlugin"],"mappings":"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"}