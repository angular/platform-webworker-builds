{"version":3,"file":"post_message_bus.js","sourceRoot":"","sources":["../../../../../../../packages/platform-webworker/src/web_workers/shared/post_message_bus.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Injectable, NgZone} from '@angular/core';\n\nimport {MessageBus, MessageBusSink, MessageBusSource} from './message_bus';\n\n\n\n// TODO(jteplitz602): Replace this with the definition in lib.webworker.d.ts(#3492)\nexport interface PostMessageTarget {\n  postMessage: (message: any, transfer?: [ArrayBuffer]) => void;\n}\n\nexport class PostMessageBusSink implements MessageBusSink {\n  private _zone: NgZone;\n  private _channels: {[key: string]: _Channel} = {};\n  private _messageBuffer: Array<Object> = [];\n\n  constructor(private _postMessageTarget: PostMessageTarget) {}\n\n  attachToZone(zone: NgZone): void {\n    this._zone = zone;\n    this._zone.runOutsideAngular(\n        () => { this._zone.onStable.subscribe({next: () => { this._handleOnEventDone(); }}); });\n  }\n\n  initChannel(channel: string, runInZone: boolean = true): void {\n    if (this._channels.hasOwnProperty(channel)) {\n      throw new Error(`${channel} has already been initialized`);\n    }\n\n    const emitter = new EventEmitter(false);\n    const channelInfo = new _Channel(emitter, runInZone);\n    this._channels[channel] = channelInfo;\n    emitter.subscribe((data: Object) => {\n      const message = {channel: channel, message: data};\n      if (runInZone) {\n        this._messageBuffer.push(message);\n      } else {\n        this._sendMessages([message]);\n      }\n    });\n  }\n\n  to(channel: string): EventEmitter<any> {\n    if (this._channels.hasOwnProperty(channel)) {\n      return this._channels[channel].emitter;\n    } else {\n      throw new Error(`${channel} is not set up. Did you forget to call initChannel?`);\n    }\n  }\n\n  private _handleOnEventDone() {\n    if (this._messageBuffer.length > 0) {\n      this._sendMessages(this._messageBuffer);\n      this._messageBuffer = [];\n    }\n  }\n\n  private _sendMessages(messages: Array<Object>) { this._postMessageTarget.postMessage(messages); }\n}\n\nexport class PostMessageBusSource implements MessageBusSource {\n  private _zone: NgZone;\n  private _channels: {[key: string]: _Channel} = {};\n\n  constructor(eventTarget?: EventTarget) {\n    if (eventTarget) {\n      eventTarget.addEventListener('message', (ev: MessageEvent) => this._handleMessages(ev));\n    } else {\n      // if no eventTarget is given we assume we're in a WebWorker and listen on the global scope\n      const workerScope = <EventTarget>self;\n      workerScope.addEventListener('message', (ev: MessageEvent) => this._handleMessages(ev));\n    }\n  }\n\n  attachToZone(zone: NgZone) { this._zone = zone; }\n\n  initChannel(channel: string, runInZone: boolean = true) {\n    if (this._channels.hasOwnProperty(channel)) {\n      throw new Error(`${channel} has already been initialized`);\n    }\n\n    const emitter = new EventEmitter(false);\n    const channelInfo = new _Channel(emitter, runInZone);\n    this._channels[channel] = channelInfo;\n  }\n\n  from(channel: string): EventEmitter<any> {\n    if (this._channels.hasOwnProperty(channel)) {\n      return this._channels[channel].emitter;\n    } else {\n      throw new Error(`${channel} is not set up. Did you forget to call initChannel?`);\n    }\n  }\n\n  private _handleMessages(ev: MessageEvent): void {\n    const messages = ev.data;\n    for (let i = 0; i < messages.length; i++) {\n      this._handleMessage(messages[i]);\n    }\n  }\n\n  private _handleMessage(data: any): void {\n    const channel = data.channel;\n    if (this._channels.hasOwnProperty(channel)) {\n      const channelInfo = this._channels[channel];\n      if (channelInfo.runInZone) {\n        this._zone.run(() => { channelInfo.emitter.emit(data.message); });\n      } else {\n        channelInfo.emitter.emit(data.message);\n      }\n    }\n  }\n}\n\n/**\n * A TypeScript implementation of {@link MessageBus} for communicating via JavaScript's\n * postMessage API.\n */\n@Injectable()\nexport class PostMessageBus implements MessageBus {\n  constructor(public sink: PostMessageBusSink, public source: PostMessageBusSource) {}\n\n  attachToZone(zone: NgZone): void {\n    this.source.attachToZone(zone);\n    this.sink.attachToZone(zone);\n  }\n\n  initChannel(channel: string, runInZone: boolean = true): void {\n    this.source.initChannel(channel, runInZone);\n    this.sink.initChannel(channel, runInZone);\n  }\n\n  from(channel: string): EventEmitter<any> { return this.source.from(channel); }\n\n  to(channel: string): EventEmitter<any> { return this.sink.to(channel); }\n}\n\n/**\n * Helper class that wraps a channel's {@link EventEmitter} and\n * keeps track of if it should run in the zone.\n */\nclass _Channel {\n  constructor(public emitter: EventEmitter<any>, public runInZone: boolean) {}\n}\n"]}