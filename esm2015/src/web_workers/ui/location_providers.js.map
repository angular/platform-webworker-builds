{"version":3,"file":"location_providers.js","sourceRoot":"","sources":["../../../../../../packages/platform-webworker/src/web_workers/ui/location_providers.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,QAAQ,EAAC,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,oBAAoB,EAAiB,MAAM,eAAe,CAAC;AACrF,OAAO,EAAC,wBAAwB,IAAI,uBAAuB,EAAC,MAAM,2BAA2B,CAAC;AAE9F,OAAO,EAAC,UAAU,EAAC,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAC,UAAU,EAAC,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAC,2BAA2B,EAAC,MAAM,kCAAkC,CAAC;AAE7E,OAAO,EAAC,4BAA4B,EAAC,MAAM,qBAAqB,CAAC;;;;;;AASjE,MAAM,CAAC,uBAAM,4BAA4B,qBAAqB;IAC5D,EAAC,OAAO,EAAE,4BAA4B,EAAE,IAAI,EAAE,CAAC,2BAA2B;YACxE,uBAAuB,EAAE,UAAU,EAAE,UAAU,CAAC,EAAC;IACnD,EAAC,OAAO,EAAE,uBAAuB,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAC;IACpD,EAAC,OAAO,EAAE,oBAAoB,EAAE,UAAU,EAAE,cAAc,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAC;CAC3F,CAAA,CAAC;;;;;AAEF,wBAAwB,QAAkB;IACxC,MAAM,CAAC,GAAG,EAAE;QACV,uBAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAS,MAAM,CAAC,CAAC;QAE1C,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;KAC3E,CAAC;CACH","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Injector, NgZone, PLATFORM_INITIALIZER, StaticProvider} from '@angular/core';\nimport {ÉµBrowserPlatformLocation as BrowserPlatformLocation} from '@angular/platform-browser';\n\nimport {MessageBus} from '../shared/message_bus';\nimport {Serializer} from '../shared/serializer';\nimport {ServiceMessageBrokerFactory} from '../shared/service_message_broker';\n\nimport {MessageBasedPlatformLocation} from './platform_location';\n\n\n\n/**\n * A list of {@link Provider}s. To use the router in a Worker enabled application you must\n * include these providers when setting up the render thread.\n * @experimental\n */\nexport const WORKER_UI_LOCATION_PROVIDERS = <StaticProvider[]>[\n  {provide: MessageBasedPlatformLocation, deps: [ServiceMessageBrokerFactory,\n    BrowserPlatformLocation, MessageBus, Serializer]},\n  {provide: BrowserPlatformLocation, deps: [DOCUMENT]},\n  {provide: PLATFORM_INITIALIZER, useFactory: initUiLocation, multi: true, deps: [Injector]}\n];\n\nfunction initUiLocation(injector: Injector): () => void {\n  return () => {\n    const zone = injector.get<NgZone>(NgZone);\n\n    zone.runGuarded(() => injector.get(MessageBasedPlatformLocation).start());\n  };\n}\n"]}