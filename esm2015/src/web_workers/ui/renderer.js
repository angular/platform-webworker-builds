/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable, RendererFactory2 } from '@angular/core';
import { MessageBus } from '../shared/message_bus';
import { EVENT_2_CHANNEL, RENDERER_2_CHANNEL } from '../shared/messaging_api';
import { RenderStore } from '../shared/render_store';
import { Serializer } from '../shared/serializer';
import { ServiceMessageBrokerFactory } from '../shared/service_message_broker';
import { EventDispatcher } from '../ui/event_dispatcher';
import * as i0 from "@angular/core";
import * as i1 from "../shared/service_message_broker";
import * as i2 from "../shared/message_bus";
import * as i3 from "../shared/serializer";
import * as i4 from "../shared/render_store";
let MessageBasedRenderer2 = /** @class */ (() => {
    class MessageBasedRenderer2 {
        constructor(_brokerFactory, _bus, _serializer, _renderStore, _rendererFactory) {
            this._brokerFactory = _brokerFactory;
            this._bus = _bus;
            this._serializer = _serializer;
            this._renderStore = _renderStore;
            this._rendererFactory = _rendererFactory;
        }
        start() {
            const broker = this._brokerFactory.createMessageBroker(RENDERER_2_CHANNEL);
            this._bus.initChannel(EVENT_2_CHANNEL);
            this._eventDispatcher = new EventDispatcher(this._bus.to(EVENT_2_CHANNEL), this._serializer);
            const [RSO, P, CRT] = [
                2 /* RENDER_STORE_OBJECT */,
                1 /* PRIMITIVE */,
                0 /* RENDERER_TYPE_2 */,
            ];
            const methods = [
                ['createRenderer', this.createRenderer, RSO, CRT, P],
                ['createElement', this.createElement, RSO, P, P, P],
                ['createComment', this.createComment, RSO, P, P],
                ['createText', this.createText, RSO, P, P],
                ['appendChild', this.appendChild, RSO, RSO, RSO],
                ['insertBefore', this.insertBefore, RSO, RSO, RSO, RSO],
                ['removeChild', this.removeChild, RSO, RSO, RSO],
                ['selectRootElement', this.selectRootElement, RSO, P, P],
                ['parentNode', this.parentNode, RSO, RSO, P],
                ['nextSibling', this.nextSibling, RSO, RSO, P],
                ['setAttribute', this.setAttribute, RSO, RSO, P, P, P],
                ['removeAttribute', this.removeAttribute, RSO, RSO, P, P],
                ['addClass', this.addClass, RSO, RSO, P],
                ['removeClass', this.removeClass, RSO, RSO, P],
                ['setStyle', this.setStyle, RSO, RSO, P, P, P],
                ['removeStyle', this.removeStyle, RSO, RSO, P, P],
                ['setProperty', this.setProperty, RSO, RSO, P, P],
                ['setValue', this.setValue, RSO, RSO, P],
                ['listen', this.listen, RSO, RSO, P, P, P],
                ['unlisten', this.unlisten, RSO, RSO],
                ['destroy', this.destroy, RSO],
                ['destroyNode', this.destroyNode, RSO, P]
            ];
            methods.forEach(([name, method, ...argTypes]) => {
                broker.registerMethod(name, argTypes, method.bind(this));
            });
        }
        destroy(r) {
            r.destroy();
        }
        destroyNode(r, node) {
            if (r.destroyNode) {
                r.destroyNode(node);
            }
            this._renderStore.remove(node);
        }
        createRenderer(el, type, id) {
            this._renderStore.store(this._rendererFactory.createRenderer(el, type), id);
        }
        createElement(r, name, namespace, id) {
            this._renderStore.store(r.createElement(name, namespace), id);
        }
        createComment(r, value, id) {
            this._renderStore.store(r.createComment(value), id);
        }
        createText(r, value, id) {
            this._renderStore.store(r.createText(value), id);
        }
        appendChild(r, parent, child) {
            r.appendChild(parent, child);
        }
        insertBefore(r, parent, child, ref) {
            r.insertBefore(parent, child, ref);
        }
        removeChild(r, parent, child) {
            r.removeChild(parent, child);
        }
        selectRootElement(r, selector, id) {
            this._renderStore.store(r.selectRootElement(selector), id);
        }
        parentNode(r, node, id) {
            this._renderStore.store(r.parentNode(node), id);
        }
        nextSibling(r, node, id) {
            this._renderStore.store(r.nextSibling(node), id);
        }
        setAttribute(r, el, name, value, namespace) {
            r.setAttribute(el, name, value, namespace);
        }
        removeAttribute(r, el, name, namespace) {
            r.removeAttribute(el, name, namespace);
        }
        addClass(r, el, name) {
            r.addClass(el, name);
        }
        removeClass(r, el, name) {
            r.removeClass(el, name);
        }
        setStyle(r, el, style, value, flags) {
            r.setStyle(el, style, value, flags);
        }
        removeStyle(r, el, style, flags) {
            r.removeStyle(el, style, flags);
        }
        setProperty(r, el, name, value) {
            r.setProperty(el, name, value);
        }
        setValue(r, node, value) {
            r.setValue(node, value);
        }
        listen(r, el, elName, eventName, unlistenId) {
            const listener = (event) => {
                return this._eventDispatcher.dispatchRenderEvent(el, elName, eventName, event);
            };
            const unlisten = r.listen(el || elName, eventName, listener);
            this._renderStore.store(unlisten, unlistenId);
        }
        unlisten(r, unlisten) {
            unlisten();
        }
    }
    MessageBasedRenderer2.ɵfac = function MessageBasedRenderer2_Factory(t) { return new (t || MessageBasedRenderer2)(i0.ɵɵinject(i1.ServiceMessageBrokerFactory), i0.ɵɵinject(i2.MessageBus), i0.ɵɵinject(i3.Serializer), i0.ɵɵinject(i4.RenderStore), i0.ɵɵinject(i0.RendererFactory2)); };
    MessageBasedRenderer2.ɵprov = i0.ɵɵdefineInjectable({ token: MessageBasedRenderer2, factory: MessageBasedRenderer2.ɵfac });
    return MessageBasedRenderer2;
})();
export { MessageBasedRenderer2 };
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(MessageBasedRenderer2, [{
        type: Injectable
    }], function () { return [{ type: i1.ServiceMessageBrokerFactory }, { type: i2.MessageBus }, { type: i3.Serializer }, { type: i4.RenderStore }, { type: i0.RendererFactory2 }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,