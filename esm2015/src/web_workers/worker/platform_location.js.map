{"version":3,"file":"platform_location.js","sourceRoot":"","sources":["../../../../../../packages/platform-webworker/src/web_workers/worker/platform_location.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationChangeListener, PlatformLocation} from '@angular/common';\nimport {EventEmitter, Injectable} from '@angular/core';\nimport {ClientMessageBroker, ClientMessageBrokerFactory, FnArg, UiArguments} from '../shared/client_message_broker';\nimport {MessageBus} from '../shared/message_bus';\nimport {ROUTER_CHANNEL} from '../shared/messaging_api';\nimport {LocationType, Serializer, SerializerTypes} from '../shared/serializer';\n\n@Injectable()\nexport class WebWorkerPlatformLocation extends PlatformLocation {\n  private _broker: ClientMessageBroker;\n  private _popStateListeners: Array<Function> = [];\n  private _hashChangeListeners: Array<Function> = [];\n  private _location: LocationType = null !;\n  private _channelSource: EventEmitter<Object>;\n  public initialized: Promise<any>;\n  private initializedResolve: () => void;\n\n  constructor(\n      brokerFactory: ClientMessageBrokerFactory, bus: MessageBus, private _serializer: Serializer) {\n    super();\n    this._broker = brokerFactory.createMessageBroker(ROUTER_CHANNEL);\n    this._channelSource = bus.from(ROUTER_CHANNEL);\n\n    this._channelSource.subscribe({\n      next: (msg: {[key: string]: any}) => {\n        let listeners: Array<Function>|null = null;\n        if (msg.hasOwnProperty('event')) {\n          const type: string = msg['event']['type'];\n          if (type === 'popstate') {\n            listeners = this._popStateListeners;\n          } else if (type === 'hashchange') {\n            listeners = this._hashChangeListeners;\n          }\n\n          if (listeners) {\n            // There was a popState or hashChange event, so the location object thas been updated\n            this._location = this._serializer.deserialize(msg['location'], LocationType);\n            listeners.forEach((fn: Function) => fn(msg['event']));\n          }\n        }\n      }\n    });\n    this.initialized = new Promise(res => this.initializedResolve = res);\n  }\n\n  /** @internal **/\n  init(): Promise<boolean> {\n    const args: UiArguments = new UiArguments('getLocation');\n\n    return this._broker.runOnService(args, LocationType) !.then(\n        (val: LocationType) => {\n          this._location = val;\n          this.initializedResolve();\n          return true;\n        },\n        err => { throw new Error(err); });\n  }\n\n  getBaseHrefFromDOM(): string {\n    throw new Error(\n        'Attempt to get base href from DOM from WebWorker. You must either provide a value for the APP_BASE_HREF token through DI or use the hash location strategy.');\n  }\n\n  onPopState(fn: LocationChangeListener): void { this._popStateListeners.push(fn); }\n\n  onHashChange(fn: LocationChangeListener): void { this._hashChangeListeners.push(fn); }\n\n  get pathname(): string { return this._location ? this._location.pathname ! : '<unknown>'; }\n\n  get search(): string { return this._location ? this._location.search : '<unknown>'; }\n\n  get hash(): string { return this._location ? this._location.hash : '<unknown>'; }\n\n  set pathname(newPath: string) {\n    if (this._location === null) {\n      throw new Error('Attempt to set pathname before value is obtained from UI');\n    }\n\n    this._location.pathname = newPath;\n\n    const fnArgs = [new FnArg(newPath, SerializerTypes.PRIMITIVE)];\n    const args = new UiArguments('setPathname', fnArgs);\n    this._broker.runOnService(args, null);\n  }\n\n  pushState(state: any, title: string, url: string): void {\n    const fnArgs = [\n      new FnArg(state, SerializerTypes.PRIMITIVE),\n      new FnArg(title, SerializerTypes.PRIMITIVE),\n      new FnArg(url, SerializerTypes.PRIMITIVE),\n    ];\n    const args = new UiArguments('pushState', fnArgs);\n    this._broker.runOnService(args, null);\n  }\n\n  replaceState(state: any, title: string, url: string): void {\n    const fnArgs = [\n      new FnArg(state, SerializerTypes.PRIMITIVE),\n      new FnArg(title, SerializerTypes.PRIMITIVE),\n      new FnArg(url, SerializerTypes.PRIMITIVE),\n    ];\n    const args = new UiArguments('replaceState', fnArgs);\n    this._broker.runOnService(args, null);\n  }\n\n  forward(): void {\n    const args = new UiArguments('forward');\n    this._broker.runOnService(args, null);\n  }\n\n  back(): void {\n    const args = new UiArguments('back');\n    this._broker.runOnService(args, null);\n  }\n}\n"]}