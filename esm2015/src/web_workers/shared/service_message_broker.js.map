{"version":3,"file":"service_message_broker.js","sourceRoot":"","sources":["../../../../../../packages/platform-webworker/src/web_workers/shared/service_message_broker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Injectable, Type} from '@angular/core';\nimport {MessageBus} from '../shared/message_bus';\nimport {Serializer, SerializerTypes} from '../shared/serializer';\n\n\n/**\n * @experimental WebWorker support in Angular is currently experimental.\n */\n@Injectable()\nexport class ServiceMessageBrokerFactory {\n  /** @internal */\n  _serializer: Serializer;\n\n  /** @internal */\n  constructor(private _messageBus: MessageBus, _serializer: Serializer) {\n    this._serializer = _serializer;\n  }\n\n  /**\n   * Initializes the given channel and attaches a new {@link ServiceMessageBroker} to it.\n   */\n  createMessageBroker(channel: string, runInZone: boolean = true): ServiceMessageBroker {\n    this._messageBus.initChannel(channel, runInZone);\n    return new ServiceMessageBroker(this._messageBus, this._serializer, channel);\n  }\n}\n\n/**\n * Helper class for UIComponents that allows components to register methods.\n * If a registered method message is received from the broker on the worker,\n * the UIMessageBroker deserializes its arguments and calls the registered method.\n * If that method returns a promise, the UIMessageBroker returns the result to the worker.\n *\n * @experimental WebWorker support in Angular is currently experimental.\n */\nexport class ServiceMessageBroker {\n  private _sink: EventEmitter<any>;\n  private _methods = new Map<string, Function>();\n\n  /** @internal */\n  constructor(messageBus: MessageBus, private _serializer: Serializer, private channel: string) {\n    this._sink = messageBus.to(channel);\n    const source = messageBus.from(channel);\n    source.subscribe({next: (message: any) => this._handleMessage(message)});\n  }\n\n  registerMethod(\n      methodName: string, signature: Array<Type<any>|SerializerTypes>|null,\n      method: (..._: any[]) => Promise<any>| void, returnType?: Type<any>|SerializerTypes): void {\n    this._methods.set(methodName, (message: ReceivedMessage) => {\n      const serializedArgs = message.args;\n      const numArgs = signature ? signature.length : 0;\n      const deserializedArgs = new Array(numArgs);\n      for (let i = 0; i < numArgs; i++) {\n        const serializedArg = serializedArgs[i];\n        deserializedArgs[i] = this._serializer.deserialize(serializedArg, signature ![i]);\n      }\n\n      const promise = method(...deserializedArgs);\n      if (returnType && promise) {\n        this._wrapWebWorkerPromise(message.id, promise, returnType);\n      }\n    });\n  }\n\n  private _handleMessage(message: ReceivedMessage): void {\n    if (this._methods.has(message.method)) {\n      this._methods.get(message.method) !(message);\n    }\n  }\n\n  private _wrapWebWorkerPromise(id: string, promise: Promise<any>, type: Type<any>|SerializerTypes):\n      void {\n    promise.then((result: any) => {\n      this._sink.emit({\n        'type': 'result',\n        'value': this._serializer.serialize(result, type),\n        'id': id,\n      });\n    });\n  }\n}\n\n/**\n * @experimental WebWorker support in Angular is currently experimental.\n */\nexport interface ReceivedMessage {\n  method: string;\n  args: any[];\n  id: string;\n  type: string;\n}\n"]}