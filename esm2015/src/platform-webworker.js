/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { platformWorkerUi, WORKER_SCRIPT } from './worker_render';
export { VERSION } from './version';
export { ClientMessageBroker, ClientMessageBrokerFactory, FnArg, UiArguments } from './web_workers/shared/client_message_broker';
export { MessageBus } from './web_workers/shared/message_bus';
export { ServiceMessageBroker, ServiceMessageBrokerFactory } from './web_workers/shared/service_message_broker';
export { WORKER_UI_LOCATION_PROVIDERS } from './web_workers/ui/location_providers';
export { WORKER_APP_LOCATION_PROVIDERS } from './web_workers/worker/location_providers';
export { platformWorkerApp, WorkerAppModule } from './worker_app';
export { platformWorkerUi } from './worker_render';
/**
 * Bootstraps the worker ui.
 *
 * @publicApi
 * @deprecated platform-webworker is deprecated in Angular and will be removed in a future version
 *     of Angular
 */
export function bootstrapWorkerUi(workerScriptUri, customProviders = []) {
    // For now, just creates the worker ui platform...
    const platform = platformWorkerUi([
        { provide: WORKER_SCRIPT, useValue: workerScriptUri },
        ...customProviders,
    ]);
    return Promise.resolve(platform);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm0td2Vid29ya2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvcGxhdGZvcm0td2Vid29ya2VyL3NyYy9wbGF0Zm9ybS13ZWJ3b3JrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBSUgsT0FBTyxFQUFDLGdCQUFnQixFQUFFLGFBQWEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRWhFLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDbEMsT0FBTyxFQUFDLG1CQUFtQixFQUFFLDBCQUEwQixFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUMsTUFBTSw0Q0FBNEMsQ0FBQztBQUMvSCxPQUFPLEVBQUMsVUFBVSxFQUFtQyxNQUFNLGtDQUFrQyxDQUFDO0FBRTlGLE9BQU8sRUFBa0Isb0JBQW9CLEVBQUUsMkJBQTJCLEVBQUMsTUFBTSw2Q0FBNkMsQ0FBQztBQUMvSCxPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUNqRixPQUFPLEVBQUMsNkJBQTZCLEVBQUMsTUFBTSx5Q0FBeUMsQ0FBQztBQUN0RixPQUFPLEVBQUMsaUJBQWlCLEVBQUUsZUFBZSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ2hFLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRWpEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FDN0IsZUFBdUIsRUFBRSxrQkFBb0MsRUFBRTtJQUNqRSxrREFBa0Q7SUFDbEQsTUFBTSxRQUFRLEdBQUcsZ0JBQWdCLENBQUM7UUFDaEMsRUFBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUM7UUFDbkQsR0FBRyxlQUFlO0tBQ25CLENBQUMsQ0FBQztJQUVILE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNuQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7UGxhdGZvcm1SZWYsIFN0YXRpY1Byb3ZpZGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtwbGF0Zm9ybVdvcmtlclVpLCBXT1JLRVJfU0NSSVBUfSBmcm9tICcuL3dvcmtlcl9yZW5kZXInO1xuXG5leHBvcnQge1ZFUlNJT059IGZyb20gJy4vdmVyc2lvbic7XG5leHBvcnQge0NsaWVudE1lc3NhZ2VCcm9rZXIsIENsaWVudE1lc3NhZ2VCcm9rZXJGYWN0b3J5LCBGbkFyZywgVWlBcmd1bWVudHN9IGZyb20gJy4vd2ViX3dvcmtlcnMvc2hhcmVkL2NsaWVudF9tZXNzYWdlX2Jyb2tlcic7XG5leHBvcnQge01lc3NhZ2VCdXMsIE1lc3NhZ2VCdXNTaW5rLCBNZXNzYWdlQnVzU291cmNlfSBmcm9tICcuL3dlYl93b3JrZXJzL3NoYXJlZC9tZXNzYWdlX2J1cyc7XG5leHBvcnQge1NlcmlhbGl6ZXJUeXBlc30gZnJvbSAnLi93ZWJfd29ya2Vycy9zaGFyZWQvc2VyaWFsaXplcic7XG5leHBvcnQge1JlY2VpdmVkTWVzc2FnZSwgU2VydmljZU1lc3NhZ2VCcm9rZXIsIFNlcnZpY2VNZXNzYWdlQnJva2VyRmFjdG9yeX0gZnJvbSAnLi93ZWJfd29ya2Vycy9zaGFyZWQvc2VydmljZV9tZXNzYWdlX2Jyb2tlcic7XG5leHBvcnQge1dPUktFUl9VSV9MT0NBVElPTl9QUk9WSURFUlN9IGZyb20gJy4vd2ViX3dvcmtlcnMvdWkvbG9jYXRpb25fcHJvdmlkZXJzJztcbmV4cG9ydCB7V09SS0VSX0FQUF9MT0NBVElPTl9QUk9WSURFUlN9IGZyb20gJy4vd2ViX3dvcmtlcnMvd29ya2VyL2xvY2F0aW9uX3Byb3ZpZGVycyc7XG5leHBvcnQge3BsYXRmb3JtV29ya2VyQXBwLCBXb3JrZXJBcHBNb2R1bGV9IGZyb20gJy4vd29ya2VyX2FwcCc7XG5leHBvcnQge3BsYXRmb3JtV29ya2VyVWl9IGZyb20gJy4vd29ya2VyX3JlbmRlcic7XG5cbi8qKlxuICogQm9vdHN0cmFwcyB0aGUgd29ya2VyIHVpLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqIEBkZXByZWNhdGVkIHBsYXRmb3JtLXdlYndvcmtlciBpcyBkZXByZWNhdGVkIGluIEFuZ3VsYXIgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uXG4gKiAgICAgb2YgQW5ndWxhclxuICovXG5leHBvcnQgZnVuY3Rpb24gYm9vdHN0cmFwV29ya2VyVWkoXG4gICAgd29ya2VyU2NyaXB0VXJpOiBzdHJpbmcsIGN1c3RvbVByb3ZpZGVyczogU3RhdGljUHJvdmlkZXJbXSA9IFtdKTogUHJvbWlzZTxQbGF0Zm9ybVJlZj4ge1xuICAvLyBGb3Igbm93LCBqdXN0IGNyZWF0ZXMgdGhlIHdvcmtlciB1aSBwbGF0Zm9ybS4uLlxuICBjb25zdCBwbGF0Zm9ybSA9IHBsYXRmb3JtV29ya2VyVWkoW1xuICAgIHtwcm92aWRlOiBXT1JLRVJfU0NSSVBULCB1c2VWYWx1ZTogd29ya2VyU2NyaXB0VXJpfSxcbiAgICAuLi5jdXN0b21Qcm92aWRlcnMsXG4gIF0pO1xuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUocGxhdGZvcm0pO1xufVxuIl19