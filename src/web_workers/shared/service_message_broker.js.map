{"version":3,"sources":["../../../../../../modules/@angular/platform-webworker/src/web_workers/shared/service_message_broker.ts"],"names":[],"mappings":"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","file":"service_message_broker.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Type} from '@angular/core/index';\n\nimport {EventEmitter} from '../../facade/async';\nimport {isPresent} from '../../facade/lang';\nimport {MessageBus} from '../shared/message_bus';\nimport {Serializer} from '../shared/serializer';\n/**\n * \\@experimental WebWorker support in Angular is currently experimental.\n * @abstract\n */\nexport abstract class ServiceMessageBrokerFactory {\n/**\n * Initializes the given channel and attaches a new {\\@link ServiceMessageBroker} to it.\n * @abstract\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone?: boolean) {}\n}\nexport class ServiceMessageBrokerFactory_ extends ServiceMessageBrokerFactory {\n  /** @internal */\n  _serializer: Serializer;\n/**\n * @param {?} _messageBus\n * @param {?} _serializer\n */\nconstructor(private _messageBus: MessageBus, _serializer: Serializer) {\n    super();\n    this._serializer = _serializer;\n  }\n/**\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone: boolean = true): ServiceMessageBroker {\n    this._messageBus.initChannel(channel, runInZone);\n    return new ServiceMessageBroker_(this._messageBus, this._serializer, channel);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MessageBus, },\n{type: Serializer, },\n];\n}\n\nfunction ServiceMessageBrokerFactory__tsickle_Closure_declarations() {\n/** @type {?} */\nServiceMessageBrokerFactory_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nServiceMessageBrokerFactory_.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nServiceMessageBrokerFactory_.prototype._serializer;\n/** @type {?} */\nServiceMessageBrokerFactory_.prototype._messageBus;\n}\n\n/**\n * Helper class for UIComponents that allows components to register methods.\n * If a registered method message is received from the broker on the worker,\n * the UIMessageBroker deserializes its arguments and calls the registered method.\n * If that method returns a promise, the UIMessageBroker returns the result to the worker.\n * \n * \\@experimental WebWorker support in Angular is currently experimental.\n * @abstract\n */\nexport abstract class ServiceMessageBroker {\n/**\n * @abstract\n * @param {?} methodName\n * @param {?} signature\n * @param {?} method\n * @param {?=} returnType\n * @return {?}\n */\nregisterMethod(\n      methodName: string, signature: Type<any>[], method: Function, returnType?: Type<any>) {}\n}\nexport class ServiceMessageBroker_ extends ServiceMessageBroker {\nprivate _sink: EventEmitter<any>;\nprivate _methods: Map<string, Function> = new Map<string, Function>();\n/**\n * @param {?} messageBus\n * @param {?} _serializer\n * @param {?} channel\n */\nconstructor(\n      messageBus: MessageBus,\nprivate _serializer: Serializer,\npublic channel: any /** TODO #9100 */) {\n    super();\n    this._sink = messageBus.to(channel);\n    const source = messageBus.from(channel);\n    source.subscribe({next: (message: any) => this._handleMessage(message)});\n  }\n/**\n * @param {?} methodName\n * @param {?} signature\n * @param {?} method\n * @param {?=} returnType\n * @return {?}\n */\nregisterMethod(\n      methodName: string, signature: Type<any>[], method: (..._: any[]) => Promise<any>| void,\n      returnType?: Type<any>): void {\n    this._methods.set(methodName, (message: ReceivedMessage) => {\n      const /** @type {?} */ serializedArgs = message.args;\n      const /** @type {?} */ numArgs = signature === null ? 0 : signature.length;\n      const /** @type {?} */ deserializedArgs: any[] = new Array(numArgs);\n      for (let /** @type {?} */ i = 0; i < numArgs; i++) {\n        const /** @type {?} */ serializedArg = serializedArgs[i];\n        deserializedArgs[i] = this._serializer.deserialize(serializedArg, signature[i]);\n      }\n\n      const /** @type {?} */ promise = method(...deserializedArgs);\n      if (isPresent(returnType) && promise) {\n        this._wrapWebWorkerPromise(message.id, promise, returnType);\n      }\n    });\n  }\n/**\n * @param {?} map\n * @return {?}\n */\nprivate _handleMessage(map: {[key: string]: any}): void {\n    const /** @type {?} */ message = new ReceivedMessage(map);\n    if (this._methods.has(message.method)) {\n      this._methods.get(message.method)(message);\n    }\n  }\n/**\n * @param {?} id\n * @param {?} promise\n * @param {?} type\n * @return {?}\n */\nprivate _wrapWebWorkerPromise(id: string, promise: Promise<any>, type: Type<any>): void {\n    promise.then((result: any) => {\n      this._sink.emit(\n          {'type': 'result', 'value': this._serializer.serialize(result, type), 'id': id});\n    });\n  }\n}\n\nfunction ServiceMessageBroker__tsickle_Closure_declarations() {\n/** @type {?} */\nServiceMessageBroker_.prototype._sink;\n/** @type {?} */\nServiceMessageBroker_.prototype._methods;\n/** @type {?} */\nServiceMessageBroker_.prototype._serializer;\n/** @type {?} */\nServiceMessageBroker_.prototype.channel;\n}\n\n/**\n * \\@experimental WebWorker support in Angular is currently experimental.\n */\nexport class ReceivedMessage {\n  method: string;\n  args: any[];\n  id: string;\n  type: string;\n/**\n * @param {?} data\n */\nconstructor(data: {[key: string]: any}) {\n    this.method = data['method'];\n    this.args = data['args'];\n    this.id = data['id'];\n    this.type = data['type'];\n  }\n}\n\nfunction ReceivedMessage_tsickle_Closure_declarations() {\n/** @type {?} */\nReceivedMessage.prototype.method;\n/** @type {?} */\nReceivedMessage.prototype.args;\n/** @type {?} */\nReceivedMessage.prototype.id;\n/** @type {?} */\nReceivedMessage.prototype.type;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}