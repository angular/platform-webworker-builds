{"version":3,"file":"service_message_broker.js","sourceRoot":"","sources":["../../../../../../modules/@angular/platform-webworker/src/web_workers/shared/service_message_broker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Type} from '@angular/core';\n\nimport {EventEmitter} from '../../facade/async';\nimport {isPresent} from '../../facade/lang';\nimport {MessageBus} from '../shared/message_bus';\nimport {Serializer} from '../shared/serializer';\n/**\n * @abstract\n */\nexport abstract class ServiceMessageBrokerFactory {\n/**\n *  Initializes the given channel and attaches a new {@link ServiceMessageBroker} to it.\n * @abstract\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone?: boolean) {}\n}\n\n\nexport class ServiceMessageBrokerFactory_ extends ServiceMessageBrokerFactory {\n  /** @internal */\n  _serializer: Serializer;\n/**\n * @param {?} _messageBus\n * @param {?} _serializer\n */\nconstructor(private _messageBus: MessageBus, _serializer: Serializer) {\n    super();\n    this._serializer = _serializer;\n  }\n/**\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone: boolean = true): ServiceMessageBroker {\n    this._messageBus.initChannel(channel, runInZone);\n    return new ServiceMessageBroker_(this._messageBus, this._serializer, channel);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MessageBus, },\n{type: Serializer, },\n];\n}\n\nfunction ServiceMessageBrokerFactory__tsickle_Closure_declarations() {\n /** @type {?} */\nServiceMessageBrokerFactory_.decorators;\n /**\n  * @nocollapse\n  * @type {?}\n  */\nServiceMessageBrokerFactory_.ctorParameters;\n /** @type {?} */\nServiceMessageBrokerFactory_.prototype._serializer;\n /** @type {?} */\nServiceMessageBrokerFactory_.prototype._messageBus;\n}\n\n/**\n *  Helper class for UIComponents that allows components to register methods.\n  * If a registered method message is received from the broker on the worker,\n  * the UIMessageBroker deserializes its arguments and calls the registered method.\n  * If that method returns a promise, the UIMessageBroker returns the result to the worker.\n  * *\n * @abstract\n */\nexport abstract class ServiceMessageBroker {\n/**\n * @abstract\n * @param {?} methodName\n * @param {?} signature\n * @param {?} method\n * @param {?=} returnType\n * @return {?}\n */\nregisterMethod(\n      methodName: string, signature: Type<any>[], method: Function, returnType?: Type<any>) {}\n}\n\nexport class ServiceMessageBroker_ extends ServiceMessageBroker {\nprivate _sink: EventEmitter<any>;\nprivate _methods: Map<string, Function> = new Map<string, Function>();\n/**\n * @param {?} messageBus\n * @param {?} _serializer\n * @param {?} channel\n */\nconstructor(\n      messageBus: MessageBus,\nprivate _serializer: Serializer,\npublic channel: any /** TODO #9100 */) {\n    super();\n    this._sink = messageBus.to(channel);\n    const source = messageBus.from(channel);\n    source.subscribe({next: (message: any) => this._handleMessage(message)});\n  }\n/**\n * @param {?} methodName\n * @param {?} signature\n * @param {?} method\n * @param {?=} returnType\n * @return {?}\n */\nregisterMethod(\n      methodName: string, signature: Type<any>[], method: (..._: any[]) => Promise<any>| void,\n      returnType?: Type<any>): void {\n    this._methods.set(methodName, (message: ReceivedMessage) => {\n      const /** @type {?} */ serializedArgs = message.args;\n      const /** @type {?} */ numArgs = signature === null ? 0 : signature.length;\n      const /** @type {?} */ deserializedArgs: any[] = new Array(numArgs);\n      for (let /** @type {?} */ i = 0; i < numArgs; i++) {\n        const /** @type {?} */ serializedArg = serializedArgs[i];\n        deserializedArgs[i] = this._serializer.deserialize(serializedArg, signature[i]);\n      }\n\n      const /** @type {?} */ promise = method(...deserializedArgs);\n      if (isPresent(returnType) && promise) {\n        this._wrapWebWorkerPromise(message.id, promise, returnType);\n      }\n    });\n  }\n/**\n * @param {?} map\n * @return {?}\n */\nprivate _handleMessage(map: {[key: string]: any}): void {\n    const /** @type {?} */ message = new ReceivedMessage(map);\n    if (this._methods.has(message.method)) {\n      this._methods.get(message.method)(message);\n    }\n  }\n/**\n * @param {?} id\n * @param {?} promise\n * @param {?} type\n * @return {?}\n */\nprivate _wrapWebWorkerPromise(id: string, promise: Promise<any>, type: Type<any>): void {\n    promise.then((result: any) => {\n      this._sink.emit(\n          {'type': 'result', 'value': this._serializer.serialize(result, type), 'id': id});\n    });\n  }\n}\n\nfunction ServiceMessageBroker__tsickle_Closure_declarations() {\n /** @type {?} */\nServiceMessageBroker_.prototype._sink;\n /** @type {?} */\nServiceMessageBroker_.prototype._methods;\n /** @type {?} */\nServiceMessageBroker_.prototype._serializer;\n /** @type {?} */\nServiceMessageBroker_.prototype.channel;\n}\n\n\n/**\n * @experimental WebWorker support in Angular is currently experimental.\n */\nexport class ReceivedMessage {\n  method: string;\n  args: any[];\n  id: string;\n  type: string;\n/**\n * @param {?} data\n */\nconstructor(data: {[key: string]: any}) {\n    this.method = data['method'];\n    this.args = data['args'];\n    this.id = data['id'];\n    this.type = data['type'];\n  }\n}\n\nfunction ReceivedMessage_tsickle_Closure_declarations() {\n /** @type {?} */\nReceivedMessage.prototype.method;\n /** @type {?} */\nReceivedMessage.prototype.args;\n /** @type {?} */\nReceivedMessage.prototype.id;\n /** @type {?} */\nReceivedMessage.prototype.type;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}