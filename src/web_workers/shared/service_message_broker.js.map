{"version":3,"sources":["../../../../../../modules/@angular/platform-webworker/src/web_workers/shared/service_message_broker.ts"],"names":[],"mappings":"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","file":"service_message_broker.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Type} from '@angular/core';\n\nimport {EventEmitter} from '../../facade/async';\nimport {MessageBus} from '../shared/message_bus';\nimport {Serializer, SerializerTypes} from '../shared/serializer';\n/**\n * \\@experimental WebWorker support in Angular is currently experimental.\n * @abstract\n */\nexport abstract class ServiceMessageBrokerFactory {\n/**\n * Initializes the given channel and attaches a new {\\@link ServiceMessageBroker} to it.\n * @abstract\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone?: boolean) {}\n}\nexport class ServiceMessageBrokerFactory_ extends ServiceMessageBrokerFactory {\n  /** @internal */\n  _serializer: Serializer;\n/**\n * @param {?} _messageBus\n * @param {?} _serializer\n */\nconstructor(private _messageBus: MessageBus, _serializer: Serializer) {\n    super();\n    this._serializer = _serializer;\n  }\n/**\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone: boolean = true): ServiceMessageBroker {\n    this._messageBus.initChannel(channel, runInZone);\n    return new ServiceMessageBroker_(this._messageBus, this._serializer, channel);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MessageBus, },\n{type: Serializer, },\n];\n}\n\nfunction ServiceMessageBrokerFactory__tsickle_Closure_declarations() {\n/** @type {?} */\nServiceMessageBrokerFactory_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nServiceMessageBrokerFactory_.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nServiceMessageBrokerFactory_.prototype._serializer;\n/** @type {?} */\nServiceMessageBrokerFactory_.prototype._messageBus;\n}\n\n/**\n * Helper class for UIComponents that allows components to register methods.\n * If a registered method message is received from the broker on the worker,\n * the UIMessageBroker deserializes its arguments and calls the registered method.\n * If that method returns a promise, the UIMessageBroker returns the result to the worker.\n * \n * \\@experimental WebWorker support in Angular is currently experimental.\n * @abstract\n */\nexport abstract class ServiceMessageBroker {\n/**\n * @abstract\n * @param {?} methodName\n * @param {?} signature\n * @param {?} method\n * @param {?=} returnType\n * @return {?}\n */\nregisterMethod(\n      methodName: string, signature: Array<Type<any>|SerializerTypes>, method: Function,\n      returnType?: Type<any>|SerializerTypes) {}\n}\nexport class ServiceMessageBroker_ extends ServiceMessageBroker {\nprivate _sink: EventEmitter<any>;\nprivate _methods = new Map<string, Function>();\n/**\n * @param {?} messageBus\n * @param {?} _serializer\n * @param {?} channel\n */\nconstructor(messageBus: MessageBus,\nprivate _serializer: Serializer,\npublic channel: string) {\n    super();\n    this._sink = messageBus.to(channel);\n    const source = messageBus.from(channel);\n    source.subscribe({next: (message: any) => this._handleMessage(message)});\n  }\n/**\n * @param {?} methodName\n * @param {?} signature\n * @param {?} method\n * @param {?=} returnType\n * @return {?}\n */\nregisterMethod(\n      methodName: string, signature: Array<Type<any>|SerializerTypes>,\n      method: (..._: any[]) => Promise<any>| void, returnType?: Type<any>|SerializerTypes): void {\n    this._methods.set(methodName, (message: ReceivedMessage) => {\n      const /** @type {?} */ serializedArgs = message.args;\n      const /** @type {?} */ numArgs = signature ? signature.length : 0;\n      const /** @type {?} */ deserializedArgs = new Array(numArgs);\n      for (let /** @type {?} */ i = 0; i < numArgs; i++) {\n        const /** @type {?} */ serializedArg = serializedArgs[i];\n        deserializedArgs[i] = this._serializer.deserialize(serializedArg, signature[i]);\n      }\n\n      const /** @type {?} */ promise = method(...deserializedArgs);\n      if (returnType && promise) {\n        this._wrapWebWorkerPromise(message.id, promise, returnType);\n      }\n    });\n  }\n/**\n * @param {?} message\n * @return {?}\n */\nprivate _handleMessage(message: ReceivedMessage): void {\n    if (this._methods.has(message.method)) {\n      this._methods.get(message.method)(message);\n    }\n  }\n/**\n * @param {?} id\n * @param {?} promise\n * @param {?} type\n * @return {?}\n */\nprivate _wrapWebWorkerPromise(id: string, promise: Promise<any>, type: Type<any>|SerializerTypes):\n      void {\n    promise.then((result: any) => {\n      this._sink.emit({\n        'type': 'result',\n        'value': this._serializer.serialize(result, type),\n        'id': id,\n      });\n    });\n  }\n}\n\nfunction ServiceMessageBroker__tsickle_Closure_declarations() {\n/** @type {?} */\nServiceMessageBroker_.prototype._sink;\n/** @type {?} */\nServiceMessageBroker_.prototype._methods;\n/** @type {?} */\nServiceMessageBroker_.prototype._serializer;\n/** @type {?} */\nServiceMessageBroker_.prototype.channel;\n}\n\n\n/**\n * @experimental WebWorker support in Angular is currently experimental.\n */\nexport interface ReceivedMessage {\n  method: string;\n  args: any[];\n  id: string;\n  type: string;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}