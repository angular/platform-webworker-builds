{"version":3,"file":"service_message_broker.js","sourceRoot":"","sources":["../../../../../../modules/@angular/platform-webworker/src/web_workers/shared/service_message_broker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Type} from '@angular/core/index';\n\nimport {EventEmitter} from '../../facade/async';\nimport {isPresent} from '../../facade/lang';\nimport {MessageBus} from '../shared/message_bus';\nimport {Serializer} from '../shared/serializer';\n/**\n * \\@experimental WebWorker support in Angular is currently experimental.\n * @abstract\n */\nexport abstract class ServiceMessageBrokerFactory {\n/**\n * Initializes the given channel and attaches a new {\\@link ServiceMessageBroker} to it.\n * @abstract\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone?: boolean) {}\n}\nexport class ServiceMessageBrokerFactory_ extends ServiceMessageBrokerFactory {\n  /** @internal */\n  _serializer: Serializer;\n/**\n * @param {?} _messageBus\n * @param {?} _serializer\n */\nconstructor(private _messageBus: MessageBus, _serializer: Serializer) {\n    super();\n    this._serializer = _serializer;\n  }\n/**\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone: boolean = true): ServiceMessageBroker {\n    this._messageBus.initChannel(channel, runInZone);\n    return new ServiceMessageBroker_(this._messageBus, this._serializer, channel);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MessageBus, },\n{type: Serializer, },\n];\n}\n\nfunction ServiceMessageBrokerFactory__tsickle_Closure_declarations() {\n/** @type {?} */\nServiceMessageBrokerFactory_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nServiceMessageBrokerFactory_.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nServiceMessageBrokerFactory_.prototype._serializer;\n/** @type {?} */\nServiceMessageBrokerFactory_.prototype._messageBus;\n}\n\n/**\n * Helper class for UIComponents that allows components to register methods.\n * If a registered method message is received from the broker on the worker,\n * the UIMessageBroker deserializes its arguments and calls the registered method.\n * If that method returns a promise, the UIMessageBroker returns the result to the worker.\n * \n * \\@experimental WebWorker support in Angular is currently experimental.\n * @abstract\n */\nexport abstract class ServiceMessageBroker {\n/**\n * @abstract\n * @param {?} methodName\n * @param {?} signature\n * @param {?} method\n * @param {?=} returnType\n * @return {?}\n */\nregisterMethod(\n      methodName: string, signature: Type<any>[], method: Function, returnType?: Type<any>) {}\n}\nexport class ServiceMessageBroker_ extends ServiceMessageBroker {\nprivate _sink: EventEmitter<any>;\nprivate _methods: Map<string, Function> = new Map<string, Function>();\n/**\n * @param {?} messageBus\n * @param {?} _serializer\n * @param {?} channel\n */\nconstructor(\n      messageBus: MessageBus,\nprivate _serializer: Serializer,\npublic channel: any /** TODO #9100 */) {\n    super();\n    this._sink = messageBus.to(channel);\n    const source = messageBus.from(channel);\n    source.subscribe({next: (message: any) => this._handleMessage(message)});\n  }\n/**\n * @param {?} methodName\n * @param {?} signature\n * @param {?} method\n * @param {?=} returnType\n * @return {?}\n */\nregisterMethod(\n      methodName: string, signature: Type<any>[], method: (..._: any[]) => Promise<any>| void,\n      returnType?: Type<any>): void {\n    this._methods.set(methodName, (message: ReceivedMessage) => {\n      const /** @type {?} */ serializedArgs = message.args;\n      const /** @type {?} */ numArgs = signature === null ? 0 : signature.length;\n      const /** @type {?} */ deserializedArgs: any[] = new Array(numArgs);\n      for (let /** @type {?} */ i = 0; i < numArgs; i++) {\n        const /** @type {?} */ serializedArg = serializedArgs[i];\n        deserializedArgs[i] = this._serializer.deserialize(serializedArg, signature[i]);\n      }\n\n      const /** @type {?} */ promise = method(...deserializedArgs);\n      if (isPresent(returnType) && promise) {\n        this._wrapWebWorkerPromise(message.id, promise, returnType);\n      }\n    });\n  }\n/**\n * @param {?} map\n * @return {?}\n */\nprivate _handleMessage(map: {[key: string]: any}): void {\n    const /** @type {?} */ message = new ReceivedMessage(map);\n    if (this._methods.has(message.method)) {\n      this._methods.get(message.method)(message);\n    }\n  }\n/**\n * @param {?} id\n * @param {?} promise\n * @param {?} type\n * @return {?}\n */\nprivate _wrapWebWorkerPromise(id: string, promise: Promise<any>, type: Type<any>): void {\n    promise.then((result: any) => {\n      this._sink.emit(\n          {'type': 'result', 'value': this._serializer.serialize(result, type), 'id': id});\n    });\n  }\n}\n\nfunction ServiceMessageBroker__tsickle_Closure_declarations() {\n/** @type {?} */\nServiceMessageBroker_.prototype._sink;\n/** @type {?} */\nServiceMessageBroker_.prototype._methods;\n/** @type {?} */\nServiceMessageBroker_.prototype._serializer;\n/** @type {?} */\nServiceMessageBroker_.prototype.channel;\n}\n\n/**\n * \\@experimental WebWorker support in Angular is currently experimental.\n */\nexport class ReceivedMessage {\n  method: string;\n  args: any[];\n  id: string;\n  type: string;\n/**\n * @param {?} data\n */\nconstructor(data: {[key: string]: any}) {\n    this.method = data['method'];\n    this.args = data['args'];\n    this.id = data['id'];\n    this.type = data['type'];\n  }\n}\n\nfunction ReceivedMessage_tsickle_Closure_declarations() {\n/** @type {?} */\nReceivedMessage.prototype.method;\n/** @type {?} */\nReceivedMessage.prototype.args;\n/** @type {?} */\nReceivedMessage.prototype.id;\n/** @type {?} */\nReceivedMessage.prototype.type;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}