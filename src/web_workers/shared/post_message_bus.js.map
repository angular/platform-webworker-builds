{"version":3,"sources":["../../../../../../modules/@angular/platform-webworker/src/web_workers/shared/post_message_bus.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,UAAE,EAAkB,MAAA,eAAA,CAAA;AAE3B,OAAO,EAAA,YAAE,EAAY,MAAA,oBAAA,CAAA;AAUrB;IAIA;;OAEG;IACH,4BADsB,kBAAoB;QAApB,uBAAA,GAAA,kBAAA,CAAoB;QAHhC,cAAA,GAAuC,EAAA,CAAG;QAC1C,mBAAA,GAAgC,EAAA,CAAG;IAEe,CAAA;IAE5D;;;OAGG;IACH,yCAJG,GAIH,UAJG,IAAA;QAIH,iBAIG;QAHC,IAAI,CAJC,KAAC,GAAO,IAAA,CAAK;QAKlB,IAAI,CAJC,KAAC,CAAK,iBAAC,CAKR,cAJQ,KAAA,CAAK,KAAC,CAAK,QAAC,CAAQ,SAAC,CAAS,EAAC,IAAC,EAAK,cAAQ,KAAA,CAAK,kBAAC,EAAkB,CAAE,CAAC,CAAA,EAAE,CAAC,CAAC,CAAC,CAAA,CAAE,CAAC;IAK9F,CAAC;IACH;;;;OAIG;IACH,wCARG,GAQH,UARG,OAAA,EAAA,SAAA;QAQH,iBAgBG;QAxBA,0BAAA,EAAA,gBAAA;QASC,EAAE,CAAC,CAAC,IARC,CAAI,SAAC,CAAS,cAAC,CAAc,OAAC,CAAO,CAAC,CAAC,CAAA;YAS1C,MARM,IAAI,KAAA,CAAO,OAAG,kCAAO,CAA+B,CAAC;QAS7D,CAAC;QAED,IAAM,gBAAgB,CARhB,OAAA,GAAU,IAAI,YAAA,CAAa,KAAC,CAAK,CAAC;QASxC,IAAM,gBAAgB,CARhB,WAAA,GAAc,IAAI,QAAA,CAAS,OAAC,EAAQ,SAAA,CAAU,CAAC;QASrD,IAAI,CARC,SAAC,CAAS,OAAC,CAAO,GAAG,WAAA,CAAY;QAStC,OAAO,CARC,SAAC,CAAS,UAAC,IAAM;YASvB,IAAM,gBAAgB,CARhB,OAAA,GAAU,EAAA,OAAE,EAAQ,OAAA,EAAS,OAAA,EAAS,IAAA,EAAK,CAAC;YASlD,EAAE,CAAC,CAAC,SARC,CAAS,CAAC,CAAA;gBASb,KAAI,CARC,cAAC,CAAc,IAAC,CAAI,OAAC,CAAO,CAAC;YASpC,CAAC;YARC,IAAA,CAAK,CAAA;gBASL,KAAI,CARC,aAAC,CAAa,CAAC,OAAC,CAAO,CAAC,CAAC;YAShC,CAAC;QACH,CAAC,CARC,CAAC;IASL,CAAC;IACH;;;OAGG;IACH,+BAXG,GAWH,UAXG,OAAA;QAYC,EAAE,CAAC,CAAC,IAXC,CAAI,SAAC,CAAS,cAAC,CAAc,OAAC,CAAO,CAAC,CAAC,CAAA;YAY1C,MAAM,CAXC,IAAA,CAAK,SAAC,CAAS,OAAC,CAAO,CAAC,OAAC,CAAO;QAYzC,CAAC;QAXC,IAAA,CAAK,CAAA;YAYL,MAXM,IAAI,KAAA,CAAO,OAAG,wDAAO,CAAqD,CAAC;QAYnF,CAAC;IACH,CAAC;IACH;;OAEG;IAZA,+CAAA,GAaH;QACI,EAAE,CAAC,CAAC,IAbC,CAAI,cAAC,CAAc,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;YAclC,IAAI,CAbC,aAAC,CAAa,IAAC,CAAI,cAAC,CAAc,CAAC;YAcxC,IAAI,CAbC,cAAC,GAAgB,EAAA,CAAG;QAc3B,CAAC;IACH,CAAC;IACH;;;OAGG;IAfA,0CAAA,GAgBH,UAhBG,QAAA,IAAgD,IAAA,CAAK,kBAAC,CAAkB,WAAC,CAAW,QAAC,CAAQ,CAAC,CAAC,CAAA;IAiBlG,yBAAC;AAAD,CAhEA,AAgEC,IAAA;;AAED;IACA,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,KAAK,CAAC;IACnC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,SAAS,CAAC;IACvC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,cAAc,CAAC;IAC5C,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,kBAAkB,CAAC;AAChD,CAAC;AAED;IAGA;;OAEG;IACH,8BA7BG,WAAyB;QA6B5B,iBAQG;QAvCO,cAAA,GAAuC,EAAA,CAAG;QAgChD,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YAChB,WAAW,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAC,EAAgB,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAxB,CAAwB,CAAC,CAAC;QAC1F,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,2FAA2F;YAC3F,IAAM,WAAW,GAAgB,IAAI,CAAC;YACtC,WAAW,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAC,EAAgB,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAxB,CAAwB,CAAC,CAAC;QAC1F,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,2CAhCG,GAgCH,UAhCG,IAAA,IAA4B,IAAA,CAAK,KAAC,GAAO,IAAA,CAAK,CAAC,CAAA;IAiClD;;;;OAIG;IACH,0CApCG,GAoCH,UApCG,OAAA,EAAA,SAAA;QAAA,0BAAA,EAAA,gBAAA;QAqCC,EAAE,CAAC,CAAC,IApCC,CAAI,SAAC,CAAS,cAAC,CAAc,OAAC,CAAO,CAAC,CAAC,CAAA;YAqC1C,MApCM,IAAI,KAAA,CAAO,OAAG,kCAAO,CAA+B,CAAC;QAqC7D,CAAC;QAED,IAAM,gBAAgB,CApChB,OAAA,GAAU,IAAI,YAAA,CAAa,KAAC,CAAK,CAAC;QAqCxC,IAAM,gBAAgB,CApChB,WAAA,GAAc,IAAI,QAAA,CAAS,OAAC,EAAQ,SAAA,CAAU,CAAC;QAqCrD,IAAI,CApCC,SAAC,CAAS,OAAC,CAAO,GAAG,WAAA,CAAY;IAqCxC,CAAC;IACH;;;OAGG;IACH,mCAvCG,GAuCH,UAvCG,OAAA;QAwCC,EAAE,CAAC,CAAC,IAvCC,CAAI,SAAC,CAAS,cAAC,CAAc,OAAC,CAAO,CAAC,CAAC,CAAA;YAwC1C,MAAM,CAvCC,IAAA,CAAK,SAAC,CAAS,OAAC,CAAO,CAAC,OAAC,CAAO;QAwCzC,CAAC;QAvCC,IAAA,CAAK,CAAA;YAwCL,MAvCM,IAAI,KAAA,CAAO,OAAG,wDAAO,CAAqD,CAAC;QAwCnF,CAAC;IACH,CAAC;IACH;;;OAGG;IAzCA,8CAAA,GA0CH,UA1CG,EAAA;QA2CC,IAAM,gBAAgB,CA1ChB,QAAA,GAAW,EAAA,CAAG,IAAC,CAAI;QA2CzB,GAAG,CAAC,CAAC,IA1CC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,QAAA,CAAS,MAAC,EAAO,CAAA,EAAE,EAAG,CAAA;YA2CxC,IAAI,CA1CC,cAAC,CAAc,QAAC,CAAQ,CAAC,CAAC,CAAC,CAAC;QA2CnC,CAAC;IACH,CAAC;IACH;;;OAGG;IA5CA,6CAAA,GA6CH,UA7CG,IAAA;QA8CC,IAAM,gBAAgB,CA7ChB,OAAA,GAAU,IAAA,CAAK,OAAC,CAAO;QA8C7B,EAAE,CAAC,CAAC,IA7CC,CAAI,SAAC,CAAS,cAAC,CAAc,OAAC,CAAO,CAAC,CAAC,CAAA;YA8C1C,IAAM,gBAAgB,CA7ChB,aAAA,GAAc,IAAA,CAAK,SAAC,CAAS,OAAC,CAAO,CAAC;YA8C5C,EAAE,CAAC,CAAC,aA7CC,CAAW,SAAC,CAAS,CAAC,CAAA;gBAsC/B,IAAA,CArCW,KAAC,CAAK,GAAC,CAAG,cAAQ,aAAA,CAAY,OAAC,CAAO,IAAC,CAAI,IAAC,CAAI,OAAC,CAAO,CAAC,CAAC,CAAA,CAAE,CAAC;YA8CpE,CAAC;YA7CC,IAAA,CAAK,CAAA;gBA8CL,aAAW,CA7CC,OAAC,CAAO,IAAC,CAAI,IAAC,CAAI,OAAC,CAAO,CAAC;YA8CzC,CAAC;QACH,CAAC;IACH,CAAC;IACH,2BAAC;AAAD,CAtEA,AAsEC,IAAA;;AAED;IACA,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,KAAK,CAAC;IACrC,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,SAAS,CAAC;AACzC,CAAC;AAED;;;GAGG;AACH;IACA;;;OAGG;IACH,wBAvDqB,IAAM,EAA2B,MAAQ;QAAzC,SAAA,GAAA,IAAA,CAAM;QAA2B,WAAA,GAAA,MAAA,CAAQ;IAAqB,CAAA;IAyDnF;;;OAGG;IACH,qCA3DG,GA2DH,UA3DG,IAAA;QA4DC,IAAI,CA3DC,MAAC,CAAM,YAAC,CAAY,IAAC,CAAI,CAAC;QA4D/B,IAAI,CA3DC,IAAC,CAAI,YAAC,CAAY,IAAC,CAAI,CAAC;IA4D/B,CAAC;IACH;;;;OAIG;IACH,oCA/DG,GA+DH,UA/DG,OAAA,EAAA,SAAA;QAAA,0BAAA,EAAA,gBAAA;QAgEC,IAAI,CA/DC,MAAC,CAAM,WAAC,CAAW,OAAC,EAAQ,SAAA,CAAU,CAAC;QAgE5C,IAAI,CA/DC,IAAC,CAAI,WAAC,CAAW,OAAC,EAAQ,SAAA,CAAU,CAAC;IAgE5C,CAAC;IACH;;;OAGG;IACH,6BAlEG,GAkEH,UAlEG,OAAA,IAA0C,MAAA,CAAO,IAAA,CAAK,MAAC,CAAM,IAAC,CAAI,OAAC,CAAO,CAAC,CAAC,CAAA;IAmE/E;;;OAGG;IACH,2BArEG,GAqEH,UArEG,OAAA,IAAwC,MAAA,CAAO,IAAA,CAAK,IAAC,CAAI,EAAC,CAAE,OAAC,CAAO,CAAC,CAAC,CAAA;IA8EzE,qBAAC;AAAD,CA1CA,AA0CC;;AA7EM,yBAAA,GAAoC;IAsE3C,EArEE,IAAA,EAAM,UAAA,EAAW;CAsElB,CArEC;AAsEF,kBAAkB;AApEX,6BAAA,GAAiF,cAAM,OAAA;IAsE9F,EAAC,IArEC,EAAK,kBAAA,GAAmB;IAsE1B,EAAC,IArEC,EAAK,oBAAA,GAAqB;CAsE3B,EAxE6F,CAwE7F,CArEC;AAwEF;IACA,gBAAgB;IAChB,cAAc,CAAC,UAAU,CAAC;IAC1B;;;OAGG;IACH,cAAc,CAAC,cAAc,CAAC;IAC9B,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC;IAC9B,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC;AAChC,CAAC;AAED;;;GAGG;AACH;IACA;;;OAGG;IACH,kBAvFqB,OAA0B,EAAS,SAAW;QAA9C,YAAA,GAAA,OAAA,CAA0B;QAAS,cAAA,GAAA,SAAA,CAAW;IAAQ,CAAA;IAyF3E,eAAC;AAAD,CAPA,AAOC,IAAA;AAED;IACA,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC;IAC3B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC;AAC7B,CAAC","file":"post_message_bus.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone} from '@angular/core';\n\nimport {EventEmitter} from '../../facade/async';\n\nimport {MessageBus, MessageBusSink, MessageBusSource} from './message_bus';\n\n\n\n// TODO(jteplitz602) Replace this with the definition in lib.webworker.d.ts(#3492)\nexport interface PostMessageTarget {\n  postMessage: (message: any, transfer?: [ArrayBuffer]) => void;\n}\nexport class PostMessageBusSink implements MessageBusSink {\nprivate _zone: NgZone;\nprivate _channels: {[key: string]: _Channel} = {};\nprivate _messageBuffer: Array<Object> = [];\n/**\n * @param {?} _postMessageTarget\n */\nconstructor(private _postMessageTarget: PostMessageTarget) {}\n/**\n * @param {?} zone\n * @return {?}\n */\nattachToZone(zone: NgZone): void {\n    this._zone = zone;\n    this._zone.runOutsideAngular(\n        () => { this._zone.onStable.subscribe({next: () => { this._handleOnEventDone(); }}); });\n  }\n/**\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ninitChannel(channel: string, runInZone: boolean = true): void {\n    if (this._channels.hasOwnProperty(channel)) {\n      throw new Error(`${channel} has already been initialized`);\n    }\n\n    const /** @type {?} */ emitter = new EventEmitter(false);\n    const /** @type {?} */ channelInfo = new _Channel(emitter, runInZone);\n    this._channels[channel] = channelInfo;\n    emitter.subscribe((data: Object) => {\n      const /** @type {?} */ message = {channel: channel, message: data};\n      if (runInZone) {\n        this._messageBuffer.push(message);\n      } else {\n        this._sendMessages([message]);\n      }\n    });\n  }\n/**\n * @param {?} channel\n * @return {?}\n */\nto(channel: string): EventEmitter<any> {\n    if (this._channels.hasOwnProperty(channel)) {\n      return this._channels[channel].emitter;\n    } else {\n      throw new Error(`${channel} is not set up. Did you forget to call initChannel?`);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _handleOnEventDone() {\n    if (this._messageBuffer.length > 0) {\n      this._sendMessages(this._messageBuffer);\n      this._messageBuffer = [];\n    }\n  }\n/**\n * @param {?} messages\n * @return {?}\n */\nprivate _sendMessages(messages: Array<Object>) { this._postMessageTarget.postMessage(messages); }\n}\n\nfunction PostMessageBusSink_tsickle_Closure_declarations() {\n/** @type {?} */\nPostMessageBusSink.prototype._zone;\n/** @type {?} */\nPostMessageBusSink.prototype._channels;\n/** @type {?} */\nPostMessageBusSink.prototype._messageBuffer;\n/** @type {?} */\nPostMessageBusSink.prototype._postMessageTarget;\n}\n\nexport class PostMessageBusSource implements MessageBusSource {\nprivate _zone: NgZone;\nprivate _channels: {[key: string]: _Channel} = {};\n/**\n * @param {?=} eventTarget\n */\nconstructor(eventTarget?: EventTarget) {\n    if (eventTarget) {\n      eventTarget.addEventListener('message', (ev: MessageEvent) => this._handleMessages(ev));\n    } else {\n      // if no eventTarget is given we assume we're in a WebWorker and listen on the global scope\n      const workerScope = <EventTarget>self;\n      workerScope.addEventListener('message', (ev: MessageEvent) => this._handleMessages(ev));\n    }\n  }\n/**\n * @param {?} zone\n * @return {?}\n */\nattachToZone(zone: NgZone) { this._zone = zone; }\n/**\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ninitChannel(channel: string, runInZone: boolean = true) {\n    if (this._channels.hasOwnProperty(channel)) {\n      throw new Error(`${channel} has already been initialized`);\n    }\n\n    const /** @type {?} */ emitter = new EventEmitter(false);\n    const /** @type {?} */ channelInfo = new _Channel(emitter, runInZone);\n    this._channels[channel] = channelInfo;\n  }\n/**\n * @param {?} channel\n * @return {?}\n */\nfrom(channel: string): EventEmitter<any> {\n    if (this._channels.hasOwnProperty(channel)) {\n      return this._channels[channel].emitter;\n    } else {\n      throw new Error(`${channel} is not set up. Did you forget to call initChannel?`);\n    }\n  }\n/**\n * @param {?} ev\n * @return {?}\n */\nprivate _handleMessages(ev: MessageEvent): void {\n    const /** @type {?} */ messages = ev.data;\n    for (let /** @type {?} */ i = 0; i < messages.length; i++) {\n      this._handleMessage(messages[i]);\n    }\n  }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate _handleMessage(data: any): void {\n    const /** @type {?} */ channel = data.channel;\n    if (this._channels.hasOwnProperty(channel)) {\n      const /** @type {?} */ channelInfo = this._channels[channel];\n      if (channelInfo.runInZone) {\n        this._zone.run(() => { channelInfo.emitter.emit(data.message); });\n      } else {\n        channelInfo.emitter.emit(data.message);\n      }\n    }\n  }\n}\n\nfunction PostMessageBusSource_tsickle_Closure_declarations() {\n/** @type {?} */\nPostMessageBusSource.prototype._zone;\n/** @type {?} */\nPostMessageBusSource.prototype._channels;\n}\n\n/**\n * A TypeScript implementation of {\\@link MessageBus} for communicating via JavaScript's\n * postMessage API.\n */\nexport class PostMessageBus implements MessageBus {\n/**\n * @param {?} sink\n * @param {?} source\n */\nconstructor(public sink: PostMessageBusSink,\npublic source: PostMessageBusSource) {}\n/**\n * @param {?} zone\n * @return {?}\n */\nattachToZone(zone: NgZone): void {\n    this.source.attachToZone(zone);\n    this.sink.attachToZone(zone);\n  }\n/**\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ninitChannel(channel: string, runInZone: boolean = true): void {\n    this.source.initChannel(channel, runInZone);\n    this.sink.initChannel(channel, runInZone);\n  }\n/**\n * @param {?} channel\n * @return {?}\n */\nfrom(channel: string): EventEmitter<any> { return this.source.from(channel); }\n/**\n * @param {?} channel\n * @return {?}\n */\nto(channel: string): EventEmitter<any> { return this.sink.to(channel); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: PostMessageBusSink, },\n{type: PostMessageBusSource, },\n];\n}\n\nfunction PostMessageBus_tsickle_Closure_declarations() {\n/** @type {?} */\nPostMessageBus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPostMessageBus.ctorParameters;\n/** @type {?} */\nPostMessageBus.prototype.sink;\n/** @type {?} */\nPostMessageBus.prototype.source;\n}\n\n/**\n * Helper class that wraps a channel's {\\@link EventEmitter} and\n * keeps track of if it should run in the zone.\n */\nclass _Channel {\n/**\n * @param {?} emitter\n * @param {?} runInZone\n */\nconstructor(public emitter: EventEmitter<any>,\npublic runInZone: boolean) {}\n}\n\nfunction _Channel_tsickle_Closure_declarations() {\n/** @type {?} */\n_Channel.prototype.emitter;\n/** @type {?} */\n_Channel.prototype.runInZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}