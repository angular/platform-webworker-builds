{"version":3,"sources":["../../../../../../modules/@angular/platform-webworker/src/web_workers/shared/client_message_broker.ts"],"names":[],"mappings":"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","file":"client_message_broker.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Type} from '@angular/core/index';\n\nimport {EventEmitter} from '../../facade/async';\nimport {isPresent, print, stringify} from '../../facade/lang';\n\nimport {MessageBus} from './message_bus';\nimport {Serializer} from './serializer';\n/**\n * \\@experimental WebWorker support in Angular is experimental.\n * @abstract\n */\nexport abstract class ClientMessageBrokerFactory {\n/**\n * Initializes the given channel and attaches a new {\\@link ClientMessageBroker} to it.\n * @abstract\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone?: boolean) {}\n}\nexport class ClientMessageBrokerFactory_ extends ClientMessageBrokerFactory {\n  /** @internal */\n  _serializer: Serializer;\n/**\n * @param {?} _messageBus\n * @param {?} _serializer\n */\nconstructor(private _messageBus: MessageBus, _serializer: Serializer) {\n    super();\n    this._serializer = _serializer;\n  }\n/**\n * Initializes the given channel and attaches a new {\\@link ClientMessageBroker} to it.\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone: boolean = true): ClientMessageBroker {\n    this._messageBus.initChannel(channel, runInZone);\n    return new ClientMessageBroker_(this._messageBus, this._serializer, channel);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MessageBus, },\n{type: Serializer, },\n];\n}\n\nfunction ClientMessageBrokerFactory__tsickle_Closure_declarations() {\n/** @type {?} */\nClientMessageBrokerFactory_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nClientMessageBrokerFactory_.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nClientMessageBrokerFactory_.prototype._serializer;\n/** @type {?} */\nClientMessageBrokerFactory_.prototype._messageBus;\n}\n\n/**\n * \\@experimental WebWorker support in Angular is experimental.\n * @abstract\n */\nexport abstract class ClientMessageBroker {\n/**\n * @abstract\n * @param {?} args\n * @param {?} returnType\n * @return {?}\n */\nrunOnService(args: UiArguments, returnType: Type<any>) {}\n}\n\ninterface PromiseCompleter {\n  resolve: (result: any) => void;\n  reject: (err: any) => void;\n}\nexport class ClientMessageBroker_ extends ClientMessageBroker {\nprivate _pending: Map<string, PromiseCompleter> = new Map<string, PromiseCompleter>();\nprivate _sink: EventEmitter<any>;\npublic _serializer: Serializer;\n/**\n * @param {?} messageBus\n * @param {?} _serializer\n * @param {?} channel\n */\nconstructor(\n      messageBus: MessageBus, _serializer: Serializer,\npublic channel: any /** TODO #9100 */) {\n    super();\n    this._sink = messageBus.to(channel);\n    this._serializer = _serializer;\n    const source = messageBus.from(channel);\n\n    source.subscribe({next: (message: {[key: string]: any}) => this._handleMessage(message)});\n  }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate _generateMessageId(name: string): string {\n    const /** @type {?} */ time: string = stringify(new Date().getTime());\n    let /** @type {?} */ iteration: number = 0;\n    let /** @type {?} */ id: string = name + time + stringify(iteration);\n    while (isPresent(( /** @type {?} */((this as any)) /** TODO #9100 */)._pending[id])) {\n      id = `${name}${time}${iteration}`;\n      iteration++;\n    }\n    return id;\n  }\n/**\n * @param {?} args\n * @param {?} returnType\n * @return {?}\n */\nrunOnService(args: UiArguments, returnType: Type<any>): Promise<any> {\n    const /** @type {?} */ fnArgs: any[] /** TODO #9100 */ = [];\n    if (isPresent(args.args)) {\n      args.args.forEach(argument => {\n        if (argument.type != null) {\n          fnArgs.push(this._serializer.serialize(argument.value, argument.type));\n        } else {\n          fnArgs.push(argument.value);\n        }\n      });\n    }\n\n    let /** @type {?} */ promise: Promise<any>;\n    let /** @type {?} */ id: string = null;\n    if (returnType != null) {\n      let /** @type {?} */ completer: PromiseCompleter;\n      promise = new Promise((resolve, reject) => { completer = {resolve, reject}; });\n      id = this._generateMessageId(args.method);\n      this._pending.set(id, completer);\n      promise.catch((err) => {\n        print(err);\n        completer.reject(err);\n      });\n\n      promise = promise.then((value: any) => {\n        if (this._serializer == null) {\n          return value;\n        } else {\n          return this._serializer.deserialize(value, returnType);\n        }\n      });\n    } else {\n      promise = null;\n    }\n\n    // TODO(jteplitz602): Create a class for these messages so we don't keep using StringMap #3685\n    const /** @type {?} */ message = {'method': args.method, 'args': fnArgs};\n    if (id != null) {\n      ( /** @type {?} */((message as any)) /** TODO #9100 */)['id'] = id;\n    }\n    this._sink.emit(message);\n\n    return promise;\n  }\n/**\n * @param {?} message\n * @return {?}\n */\nprivate _handleMessage(message: {[key: string]: any}): void {\n    const /** @type {?} */ data = new MessageData(message);\n    // TODO(jteplitz602): replace these strings with messaging constants #3685\n    if (data.type === 'result' || data.type === 'error') {\n      const /** @type {?} */ id = data.id;\n      if (this._pending.has(id)) {\n        if (data.type === 'result') {\n          this._pending.get(id).resolve(data.value);\n        } else {\n          this._pending.get(id).reject(data.value);\n        }\n        this._pending.delete(id);\n      }\n    }\n  }\n}\n\nfunction ClientMessageBroker__tsickle_Closure_declarations() {\n/** @type {?} */\nClientMessageBroker_.prototype._pending;\n/** @type {?} */\nClientMessageBroker_.prototype._sink;\n/**\n * \\@internal\n * @type {?}\n */\nClientMessageBroker_.prototype._serializer;\n/** @type {?} */\nClientMessageBroker_.prototype.channel;\n}\n\nclass MessageData {\n  type: string;\n  value: any;\n  id: string;\n/**\n * @param {?} data\n */\nconstructor(data: {[key: string]: any}) {\n    this.type = data['type'];\n    this.id = this._getValueIfPresent(data, 'id');\n    this.value = this._getValueIfPresent(data, 'value');\n  }\n/**\n * Returns the value if present, otherwise returns null\n * \\@internal\n * @param {?} data\n * @param {?} key\n * @return {?}\n */\n_getValueIfPresent(data: {[key: string]: any}, key: string) {\n    return data.hasOwnProperty(key) ? data[key] : null;\n  }\n}\n\nfunction MessageData_tsickle_Closure_declarations() {\n/** @type {?} */\nMessageData.prototype.type;\n/** @type {?} */\nMessageData.prototype.value;\n/** @type {?} */\nMessageData.prototype.id;\n}\n\n/**\n * \\@experimental WebWorker support in Angular is experimental.\n */\nexport class FnArg {\n/**\n * @param {?} value\n * @param {?} type\n */\nconstructor(public value: any /** TODO #9100 */,\npublic type: Type<any>) {}\n}\n\nfunction FnArg_tsickle_Closure_declarations() {\n/** @type {?} */\nFnArg.prototype.value;\n/** @type {?} */\nFnArg.prototype.type;\n}\n\n/**\n * \\@experimental WebWorker support in Angular is experimental.\n */\nexport class UiArguments {\n/**\n * @param {?} method\n * @param {?=} args\n */\nconstructor(public method: string,\npublic args?: FnArg[]) {}\n}\n\nfunction UiArguments_tsickle_Closure_declarations() {\n/** @type {?} */\nUiArguments.prototype.method;\n/** @type {?} */\nUiArguments.prototype.args;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}