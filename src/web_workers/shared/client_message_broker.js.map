{"version":3,"sources":["../../../../../../modules/@angular/platform-webworker/src/web_workers/shared/client_message_broker.ts"],"names":[],"mappings":"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","file":"client_message_broker.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Type} from '@angular/core/index';\n\nimport {EventEmitter} from '../../facade/async';\nimport {stringify} from '../../facade/lang';\n\nimport {MessageBus} from './message_bus';\nimport {Serializer, SerializerTypes} from './serializer';\n/**\n * \\@experimental WebWorker support in Angular is experimental.\n * @abstract\n */\nexport abstract class ClientMessageBrokerFactory {\n/**\n * Initializes the given channel and attaches a new {\\@link ClientMessageBroker} to it.\n * @abstract\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone?: boolean) {}\n}\nexport class ClientMessageBrokerFactory_ extends ClientMessageBrokerFactory {\n  /** @internal */\n  _serializer: Serializer;\n/**\n * @param {?} _messageBus\n * @param {?} _serializer\n */\nconstructor(private _messageBus: MessageBus, _serializer: Serializer) {\n    super();\n    this._serializer = _serializer;\n  }\n/**\n * Initializes the given channel and attaches a new {\\@link ClientMessageBroker} to it.\n * @param {?} channel\n * @param {?=} runInZone\n * @return {?}\n */\ncreateMessageBroker(channel: string, runInZone: boolean = true): ClientMessageBroker {\n    this._messageBus.initChannel(channel, runInZone);\n    return new ClientMessageBroker_(this._messageBus, this._serializer, channel);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MessageBus, },\n{type: Serializer, },\n];\n}\n\nfunction ClientMessageBrokerFactory__tsickle_Closure_declarations() {\n/** @type {?} */\nClientMessageBrokerFactory_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nClientMessageBrokerFactory_.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nClientMessageBrokerFactory_.prototype._serializer;\n/** @type {?} */\nClientMessageBrokerFactory_.prototype._messageBus;\n}\n\n/**\n * \\@experimental WebWorker support in Angular is experimental.\n * @abstract\n */\nexport abstract class ClientMessageBroker {\n/**\n * @abstract\n * @param {?} args\n * @param {?} returnType\n * @return {?}\n */\nrunOnService(args: UiArguments, returnType: Type<any>|SerializerTypes) {}\n}\n\ninterface PromiseCompleter {\n  resolve: (result: any) => void;\n  reject: (err: any) => void;\n}\nexport class ClientMessageBroker_ extends ClientMessageBroker {\nprivate _pending = new Map<string, PromiseCompleter>();\nprivate _sink: EventEmitter<any>;\npublic _serializer: Serializer;\n/**\n * @param {?} messageBus\n * @param {?} _serializer\n * @param {?} channel\n */\nconstructor(messageBus: MessageBus, _serializer: Serializer,\npublic channel: any) {\n    super();\n    this._sink = messageBus.to(channel);\n    this._serializer = _serializer;\n    const source = messageBus.from(channel);\n\n    source.subscribe({next: (message: ResponseMessageData) => this._handleMessage(message)});\n  }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate _generateMessageId(name: string): string {\n    const /** @type {?} */ time: string = stringify(new Date().getTime());\n    let /** @type {?} */ iteration: number = 0;\n    let /** @type {?} */ id: string = name + time + stringify(iteration);\n    while (this._pending.has(id)) {\n      id = `${name}${time}${iteration}`;\n      iteration++;\n    }\n    return id;\n  }\n/**\n * @param {?} args\n * @param {?} returnType\n * @return {?}\n */\nrunOnService(args: UiArguments, returnType: Type<any>|SerializerTypes): Promise<any> {\n    const /** @type {?} */ fnArgs: any[] = [];\n    if (args.args) {\n      args.args.forEach(argument => {\n        if (argument.type != null) {\n          fnArgs.push(this._serializer.serialize(argument.value, argument.type));\n        } else {\n          fnArgs.push(argument.value);\n        }\n      });\n    }\n\n    let /** @type {?} */ promise: Promise<any>;\n    let /** @type {?} */ id: string = null;\n    if (returnType != null) {\n      let /** @type {?} */ completer: PromiseCompleter;\n      promise = new Promise((resolve, reject) => { completer = {resolve, reject}; });\n      id = this._generateMessageId(args.method);\n      this._pending.set(id, completer);\n\n      promise.catch((err) => {\n        if (console && console.error) {\n          // tslint:disable-next-line:no-console\n          console.error(err);\n        }\n\n        completer.reject(err);\n      });\n\n      promise = promise.then(\n          (v: any) => this._serializer ? this._serializer.deserialize(v, returnType) : v);\n    } else {\n      promise = null;\n    }\n\n    const /** @type {?} */ message: RequestMessageData = {\n      'method': args.method,\n      'args': fnArgs,\n    };\n    if (id != null) {\n      message['id'] = id;\n    }\n    this._sink.emit(message);\n\n    return promise;\n  }\n/**\n * @param {?} message\n * @return {?}\n */\nprivate _handleMessage(message: ResponseMessageData): void {\n    if (message.type === 'result' || message.type === 'error') {\n      const /** @type {?} */ id = message.id;\n      if (this._pending.has(id)) {\n        if (message.type === 'result') {\n          this._pending.get(id).resolve(message.value);\n        } else {\n          this._pending.get(id).reject(message.value);\n        }\n        this._pending.delete(id);\n      }\n    }\n  }\n}\n\nfunction ClientMessageBroker__tsickle_Closure_declarations() {\n/** @type {?} */\nClientMessageBroker_.prototype._pending;\n/** @type {?} */\nClientMessageBroker_.prototype._sink;\n/**\n * \\@internal\n * @type {?}\n */\nClientMessageBroker_.prototype._serializer;\n/** @type {?} */\nClientMessageBroker_.prototype.channel;\n}\n\n\ninterface RequestMessageData {\n  method: string;\n  args?: any[];\n  id?: string;\n}\n\ninterface ResponseMessageData {\n  type: 'result'|'error';\n  value?: any;\n  id?: string;\n}\n/**\n * \\@experimental WebWorker support in Angular is experimental.\n */\nexport class FnArg {\n/**\n * @param {?} value\n * @param {?=} type\n */\nconstructor(\npublic value: any,\npublic type: Type<any>|SerializerTypes = SerializerTypes.PRIMITIVE) {}\n}\n\nfunction FnArg_tsickle_Closure_declarations() {\n/** @type {?} */\nFnArg.prototype.value;\n/** @type {?} */\nFnArg.prototype.type;\n}\n\n/**\n * \\@experimental WebWorker support in Angular is experimental.\n */\nexport class UiArguments {\n/**\n * @param {?} method\n * @param {?=} args\n */\nconstructor(public method: string,\npublic args?: FnArg[]) {}\n}\n\nfunction UiArguments_tsickle_Closure_declarations() {\n/** @type {?} */\nUiArguments.prototype.method;\n/** @type {?} */\nUiArguments.prototype.args;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}