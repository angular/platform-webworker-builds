{"version":3,"sources":["../../../../modules/@angular/platform-webworker/src/platform-webworker.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAII,EAAA,aAAE,EAAc,gBAAA,EAAiB,MAAA,iBAAA;AAExC,SAAO,OAAE,QAAO,WAAA,CAAA;AAChB,SAAO,mBAAE,EAAoB,0BAAA,EAA4B,KAAA,EAAO,WAAA,QAAY,4CAAA,CAAA;AAC5E,SAAO,UAAE,QAA4C,kCAAA,CAAA;AACrD,SAAO,SAAE,QAAS,iCAAA,CAAA;AAClB,SAAO,eAAE,EAAgB,oBAAA,EAAsB,2BAAA,QAA4B,6CAAA,CAAA;AAC3E,SAAO,4BAAE,QAA4B,qCAAA,CAAA;AACrC,SAAO,6BAAE,QAA6B,yCAAA,CAAA;AACtC,SAAO,eAAE,EAAgB,iBAAA,QAAkB,cAAA,CAAA;AAC3C,SAAO,gBAAE,QAAgB,iBAAA,CAAA;AACzB;;;;;;;GAOG;AACH,kCACI,eAAuB,EAAE,eAAe,GAAe,EAAE;IAC3D,kDAAkD;IAClD,MAAM,CADC,OAAA,CAAQ,OAAC,CAAO,gBAAC,CAAgB,CAAC,CAAA,CAAC;YAEA,OAAO,EADE,aAAA;YAET,QAAQ,EADE,eAAA;SAEX,CADc,CAAA,CAAE;SAEZ,MADC,CAAM,eAAC,CAAe,CAAC,CAAC,CAAC;AAEzE,CAAC","file":"platform-webworker.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformRef, Provider} from '@angular/core/index';\n\nimport {WORKER_SCRIPT, platformWorkerUi} from './worker_render';\n\nexport {VERSION} from './version';\nexport {ClientMessageBroker, ClientMessageBrokerFactory, FnArg, UiArguments} from './web_workers/shared/client_message_broker';\nexport {MessageBus, MessageBusSink, MessageBusSource} from './web_workers/shared/message_bus';\nexport {PRIMITIVE} from './web_workers/shared/serializer';\nexport {ReceivedMessage, ServiceMessageBroker, ServiceMessageBrokerFactory} from './web_workers/shared/service_message_broker';\nexport {WORKER_UI_LOCATION_PROVIDERS} from './web_workers/ui/location_providers';\nexport {WORKER_APP_LOCATION_PROVIDERS} from './web_workers/worker/location_providers';\nexport {WorkerAppModule, platformWorkerApp} from './worker_app';\nexport {platformWorkerUi} from './worker_render';\n/**\n * Bootstraps the worker ui.\n * \n * \\@experimental\n * @param {?} workerScriptUri\n * @param {?=} customProviders\n * @return {?}\n */\nexport function bootstrapWorkerUi(\n    workerScriptUri: string, customProviders: Provider[] = []): Promise<PlatformRef> {\n  // For now, just creates the worker ui platform...\n  return Promise.resolve(platformWorkerUi(( /** @type {?} */(([{\n                                            provide: WORKER_SCRIPT,\n                                            useValue: workerScriptUri,\n                                          }] as Provider[])))\n                                              .concat(customProviders)));\n}\n"]}